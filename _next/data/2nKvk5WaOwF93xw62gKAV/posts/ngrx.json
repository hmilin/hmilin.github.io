{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\",\n    img: \"img\",\n    h4: \"h4\",\n    pre: \"pre\",\n    code: \"code\",\n    ol: \"ol\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Angular状态管理-Ngrx\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"官网介绍\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Managing global and local state.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Isolation of side effects to promote a cleaner component architecture.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Entity collection management.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Integration with the Angular Router.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Developer tooling that enhances developer experience when building many different types of applications.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"流程图\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/posts-img/ngrx-state-management-lifecycle.png\",\n        alt: \"NGRX数据流向\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"基本概念\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"actions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"代表一个应用中唯一发生的事件\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"interface Action {\\n\\ttype: string;  // [Source] description\\n}\\n// 举个栗子\\n{\\n\\ttype: '[Auth API] Login Success'\\n}\\n{\\n  type: '[Login Page] Login',\\n  username: string;\\n  password: string;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"actions 用法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"定义\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"import { createAction, props } from '@ngrx/store';\\n\\nexport const login = createAction(\\n  '[Login Page] Login',\\n  props<{ username: string; password: string }>()\\n);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"调用\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"onSubmit(username: string, password: string) {\\n  store.dispatch(login({ username: username, password: password }));\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"reducers\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"根据 action 的类型通过一个纯函数来更新 state\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"用法\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const scoreboardReducer = createReducer(\\n  initialState,\\n  on(ScoreboardPageActions.homeScore, state => ({ ...state, home: state.home + 1 })),\\n  on(ScoreboardPageActions.awayScore, state => ({ ...state, away: state.away + 1 })),\\n  on(ScoreboardPageActions.resetScore, state => ({ home: 0, away: 0 })),\\n  on(ScoreboardPageActions.setScores, (state, { game }) => ({ home: game.home, away: game.away }))\\n);\\n\\nexport function reducer(state: State | undefined, action: Action) {\\n  return scoreboardReducer(state, action);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"selectors\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"selectors 是用来获取当前状态的一个纯函数\\nngrx 提供了 createSelector 和 createFeatureSelector 来创建 selector\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"工作流\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"定义 state\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"编写 aciton，定义一个数据可以有哪些操作\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"编写 reducer，使用 createReducer 方法，定义哪些 action 的触发需要对 state 做哪些修改，on 的第二个参数必须为纯函数\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"在 module 文件里的 StoreModule.forRoot 方法传入新定义的 state 与之对应的 reducer\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"利用 selector 来获取当前 state\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"利用 dispatch 方法触发 action\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Angular状态管理-Ngrx","date":"2021-07-02 19:31:00","description":"Angular状态管理-Ngrx的工作流和基础概念解释。"}},"frontMatter":{"title":"Angular状态管理-Ngrx","date":"2021-07-02 19:31:00","description":"Angular状态管理-Ngrx的工作流和基础概念解释。"}},"__N_SSG":true}