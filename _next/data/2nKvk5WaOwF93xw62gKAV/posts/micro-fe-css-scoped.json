{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"微前端中的主应用和子应用样式隔离方案\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"ShadowDom\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"ShadowDom\"\n      }), \"是隔离主应用和子应用最彻底也是最合理的解决方案。ShadowDom 隔离样式的原理是将子应用加载在ShadowDom里面，ShadowDom中的样式天然就和外部完全隔离。国内几个微前端框架如qiankun、micro-app都有提供ShadowDom选项。\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但是在实际使用中ShadowDom并不容易用起来，比如在React17之前，需要解决事件代理问题。很多库对ShadowDom的支持也不好，需要花时间逐个测试。子应用越庞大，使用ShadowDom方案的成本会越高。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"给子应用所有选择器加前缀选择器\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"在qiankun中使用开启experimentalStyleIsolation可以给每个子应用的加根选择器，使子应用声明的样式规则只作用于该子应用\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"在micro-app中默认会加一个micro-app[name=xxx]的根选择器给所有子应用\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但是这种方式只能阻止子应用样式影响到主应用，和隔离子应用间的样式，并没有办法阻止主应用样式影响到子应用。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"给父应用所有选择器加前缀\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"使用postcss的插件给所有类选择器加前缀，对于UI库（如antd）可以使用官方提供的配置方式。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这个方案的缺点是：无法防止标签选择器声明的样式污染。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"保持主应用样式干净\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"微前端中的主应用和子应用样式隔离方案","date":"2023-5-6 19:01","description":null,"public":false}},"frontMatter":{"title":"微前端中的主应用和子应用样式隔离方案","date":"2023-5-6 19:01","description":null,"public":false}},"__N_SSG":true}