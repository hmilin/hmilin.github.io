{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    a: \"a\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"解决Vite hmr失效问题\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在将vite从4.x升级到5.x后，发现hmr不能正常工作，一番调试之后发现是由于循环依赖导致的。ESModule能正常处理循环，但仍可能出现异常，且对大型应用性能会有影响。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在Vite5.x之后的版本中，对含有循环依赖的文件进行修改，vite会重新加载页面而非使用热更新。为使应用能正常使用热更新，需要解决循环依赖的问题。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"发现原因\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"查看ws链接查看文件更新的消息明细\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"开启hmr后，vite会维持一个websocket链接，开发服务器通过给客户端发消息，告诉客户端文件更新的信息\"\n        }), \"\\n\", _jsx(_components.p, {\n          children: \"当我修改某个组件的文件时，可以看到服务器发送了一条消息信息如下：\"\n        }), \"\\n\", _jsx(_components.pre, {\n          children: _jsx(_components.code, {\n            className: \"language-jsx\",\n            children: \"{\\n    \\\"type\\\": \\\"update\\\",\\n    \\\"updates\\\": [\\n        {\\n            \\\"type\\\": \\\"js-update\\\",\\n            \\\"timestamp\\\": 1720070246631,\\n            \\\"path\\\": \\\"/src/components/header/index.tsx\\\",\\n            \\\"acceptedPath\\\": \\\"/src/components/header/index.tsx\\\",\\n            \\\"explicitImportRequired\\\": false,\\n            \\\"isWithinCircularImport\\\": true,\\n            \\\"ssrInvalidates\\\": []\\n        },\\n    ]\\n}\\n\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"跟往常的信息对比，发现\", _jsx(_components.code, {\n        children: \"isWithinCircularImport\"\n      }), \" 字段为true，猜测页面重刷和该字段有关系\"]\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"在github issues中检索\", _jsx(_components.code, {\n            children: \"isWithinCircularImport\"\n          }), \" 发现有关于循环依赖导致热更新失效的问题\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"查阅官网，在\", _jsx(_components.strong, {\n            children: \"Troubleshooting\"\n          }), \"一节中有关于热更新失败的原因之一就是循环依赖，可通\", _jsx(_components.code, {\n            children: \"—-debug\"\n          }), \" 来查看原因\"]\n        }), \"\\n\", _jsx(_components.p, {\n          children: _jsx(_components.a, {\n            href: \"https://vitejs.dev/guide/troubleshooting.html#a-full-reload-happens-instead-of-hmr\",\n            children: \"A full reload happens instead of HMR\"\n          })\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"打开调试错误信息后，在修改含循环依赖的文件时，日志如下：\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"vite:hmr circular imports detected: /src/components/header/index.tsx -> /src/store/slices/user.ts -> /src/utils/history.ts -> /src/routes/index.tsx -> /src/layouts/default.tsx -> /src/components/header/index.tsx\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在之前升级\", _jsx(_components.code, {\n        children: \"react-router\"\n      }), \" 版本时，使用了\", _jsx(_components.code, {\n        children: \"BrowserRouter\"\n      }), \" 代替\", _jsx(_components.code, {\n        children: \"HistoryRouter\"\n      }), \" 时引入了循环依赖问题。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"解决循环依赖\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"React Router\"\n      }), \"6.4之后的版本完全废弃了对5.x版本的兼容，也废弃了\", _jsx(_components.code, {\n        children: \"HistoryRouter\"\n      }), \" 的用法，官方推荐用\", _jsx(_components.code, {\n        children: \"BrowserRouter\"\n      }), \" 代替。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"为了兼容以前的history API，且支持在组件外部调用\", _jsx(_components.code, {\n        children: \"navigate\"\n      }), \"，我在原来的history文件中使用导入了的新的router实例，将原来的history调用方法代理到router实例上，保持项目中调用的API不变。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"// @/utils/history.ts\\nimport routes from '@/routes';\\nimport type { To } from 'react-router-dom';\\nimport { createBrowserRouter } from 'react-router-dom';\\n\\nexport const router = createBrowserRouter(routes);\\n// 兼容旧的history API\\nexport const history = {\\n  push: router.navigate,\\n  go: router.navigate,\\n  back: () => router.navigate(-1),\\n  listen: router.subscribe,\\n  replace: (to: To) => router.navigate(to, { replace: true }),\\n  ...router,\\n};\\n\\nexport default history;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这导致了以下循环依赖：history→router→routes→component→store→history\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"如果是全部改用新的API，需要对业务代码有很大的改造成本，且新的API只支持hook使用，在组件外部使用依然需要导入\", _jsx(_components.code, {\n        children: \"router\"\n      }), \" 实例，仍然可能引入依赖循环的问题。\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"打破依赖循环\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在深度思考之后，还是决定最小化改动，在不修改业务代码的前提下解决问题。在\", _jsx(_components.code, {\n        children: \"hitsory.ts\"\n      }), \"中维护一个router变量和\", _jsx(_components.code, {\n        children: \"injectRouter方法\"\n      }), \"，在\", _jsx(_components.code, {\n        children: \"router\"\n      }), \"被创建之后调用\", _jsx(_components.code, {\n        children: \"injectRouter\"\n      }), \"方法，即可逆转hitsory文件对router文件的依赖。\", _jsx(_components.code, {\n        children: \"hitstory\"\n      }), \"文件修改如下:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-jsx\",\n        children: \"import type { To, createBrowserRouter } from 'react-router-dom';\\n\\ntype Router = ReturnType<typeof createBrowserRouter>;\\n\\ntype History = {\\n  push: Router['navigate'];\\n  go: Router['navigate'];\\n  back: () => ReturnType<Router['navigate']>;\\n  listen: Router['subscribe'];\\n  replace: (to: To) => Promise<void>;\\n};\\n\\nlet router: Router;\\n// 兼容旧的history API\\nexport const history = new Proxy<History>({} as History, {\\n  get(target, p: keyof History, receiver) {\\n    if (!target[p]) {\\n      return () => {\\n        console.warn('Router instance is not initialized');\\n      };\\n    }\\n    return target[p];\\n  },\\n  set(target, p: keyof History, newValue, receiver) {\\n    target[p] = newValue;\\n    return true;\\n  },\\n});\\nconst initHistory = () => {\\n  history.push = router.navigate;\\n  history.go = router.navigate;\\n  history.back = () => router.navigate(-1);\\n  history.listen = router.subscribe;\\n  history.replace = (to: To) => router.navigate(to, { replace: true });\\n};\\n\\nexport function injectRouter(newRouter: Router) {\\n  router = newRouter;\\n  initHistory();\\n}\\n\\nexport default history;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"这样业务代码中任可以使用以前的API，无需任何改造。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"解决Vite hmr失效问题","date":"2024-07-05 22:23:00","description":"T在将vite从4.x升级到5.x后，由于循环依赖导致了hmr失效","category":"tool","cover":"/posts-img/vite+react.png"}},"frontMatter":{"title":"解决Vite hmr失效问题","date":"2024-07-05 22:23:00","description":"T在将vite从4.x升级到5.x后，由于循环依赖导致了hmr失效","category":"tool","cover":"/posts-img/vite+react.png"}},"__N_SSG":true}