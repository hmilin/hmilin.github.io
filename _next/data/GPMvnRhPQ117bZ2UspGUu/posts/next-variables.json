{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Next.js中如何配置代理地址\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在\", _jsx(_components.code, {\n        children: \"Next.js 13\"\n      }), \"中，有两种方式来配置服务端代理地址，这两种方法都适用于\", _jsx(_components.code, {\n        children: \"App Router\"\n      }), \"和\", _jsx(_components.code, {\n        children: \"Page Router\"\n      }), \"两种模式的应用。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"在\", _jsx(_components.code, {\n        children: \"next.config.js\"\n      }), \"中配置\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"这种方式是官方文档推荐的常规做法，通过\", _jsx(_components.code, {\n        children: \"config\"\n      }), \"中的\", _jsx(_components.code, {\n        children: \"rewrites\"\n      }), \"字段来重写地址，具体配置如下\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-javascript\",\n        children: \"rewrites() {\\n\\t\\treturn {\\n\\t\\t\\tbeforeFiles: [\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\tsource: '/api/:path*',\\n\\t\\t\\t\\t\\tdestination: `${process.env.SERVER_URL}/api/:path*`\\n\\t\\t\\t\\t}\\n\\t\\t\\t]\\n\\t\\t}\\n\\t},\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"rewrites函数的返回对象有三个字段 \", _jsx(_components.code, {\n        children: \"beforeFiles\"\n      }), \" \", _jsx(_components.code, {\n        children: \"afterFiles\"\n      }), \" \", _jsx(_components.code, {\n        children: \"fallback\"\n      }), \"，分别代表三个验证重写的时机：\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"beforeFiles\"\n        }), \" 表示重写将在读取有无相应pages和public文件之前执行，因此可以覆盖页面的请求。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"afterFiles\"\n        }), \" 在获取\", _jsx(_components.code, {\n          children: \"pages/public\"\n        }), \"之后，校验动态路由之前执行。\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.code, {\n          children: \"fallback\"\n        }), \" 在获取\", _jsx(_components.code, {\n          children: \"pages/public\"\n        }), \"和校验动态路由之前执行。\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"需要注意的是，\", _jsx(_components.code, {\n        children: \"rewrites\"\n      }), \"函数是在执行\", _jsx(_components.code, {\n        children: \"next build\"\n      }), \"的时候执行，如果在配置中使用了环境变量，将会在执行构建操作的时候填入当前指定的\", _jsx(_components.code, {\n        children: \"NODE_ENV\"\n      }), \"对应的环境变量的值。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在实际使用中，我们通常期望一个镜像可以在多个环境中运行，这就需要支持在容器运行时通过环境变量来确定服务代理地址，使用\", _jsx(_components.code, {\n        children: \"rewrites\"\n      }), \"来配置代理将无法支持。\"]\n    }), \"\\n\", _jsxs(_components.h2, {\n      children: [\"配置\", _jsx(_components.code, {\n        children: \"middleware.ts\"\n      }), \"文件自定义代理\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"middleware\"\n      }), \"可以拦截\", _jsx(_components.code, {\n        children: \"matcher\"\n      }), \"配置匹配的请求，并可以使用\", _jsx(_components.code, {\n        children: \"NextResponse\"\n      }), \"对请求进行操控。\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在和\", _jsx(_components.code, {\n        children: \"app\"\n      }), \"或\", _jsx(_components.code, {\n        children: \"pages\"\n      }), \"目录同层级声明\", _jsx(_components.code, {\n        children: \"middleware.(t|j)s\"\n      }), \"文件:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-typescript\",\n        children: \"import { NextRequest, NextResponse } from 'next/server';\\n\\n// 代理/api/开头的请求\\nexport function middleware(request: NextRequest) {\\n  return NextResponse.rewrite(\\n    new URL(`${process.env.SERVER_URL}${request.nextUrl.pathname}${request.nextUrl.search}`),\\n    { request },\\n  );\\n}\\n\\nexport const config = {\\n  matcher: ['/api/:path*'],\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"通过已上配置，在每一次有\", _jsx(_components.code, {\n        children: \"/api/:path\"\n      }), \"请求的时候，都会进入\", _jsx(_components.code, {\n        children: \"middleware\"\n      }), \"函数，这时候读取的环境变量\", _jsx(_components.code, {\n        children: \"process.env.SERVER_URL\"\n      }), \"就是运行时的环境变量了。\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Next.js中如何配置代理地址","description":"介绍Next.js中两种代理方式，以及如何使用运行时环境变量作为代理地址。","date":"2023-09-13 18:55:00","category":"framework"}},"frontMatter":{"title":"Next.js中如何配置代理地址","description":"介绍Next.js中两种代理方式，以及如何使用运行时环境变量作为代理地址。","date":"2023-09-13 18:55:00","category":"framework"}},"__N_SSG":true}