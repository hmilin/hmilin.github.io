{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      h3: \"h3\",\n      ul: \"ul\",\n      li: \"li\",\n      h4: \"h4\",\n      ol: \"ol\",\n      p: \"p\",\n      pre: \"pre\",\n      code: \"code\",\n      h5: \"h5\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"rxjs学习记录\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"基础概念\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Observable (可观察对象): 表示一个概念，这个概念是一个可调用的未来值或事件的集合。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Observer (观察者): 一个回调函数的集合，它知道如何去监听由 Observable 提供的值。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Subscription (订阅): 表示 Observable 的执行，主要用于取消 Observable 的执行。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Operators (操作符): 采用函数式编程风格的纯函数 (pure function)，使用像 map、filter、concat、flatMap 等这样的操作符来处理集合。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Subject (主体): 相当于 EventEmitter，并且是将值或事件多路推送给多个 Observer 的唯一方式。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Schedulers (调度器): 用来控制并发并且是中央集权的调度员，允许我们在发生计算时进行协调，例如 setTimeout 或 requestAnimationFrame 或其他。\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"常用操作符\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"of: 返回一个observable，依次发出传入的值\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"switchMap: 会取消上次发出的observable，通常和interval配合使用\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"mergeMap/flatMap: 与map的区别是能将返回结果打平，返回一个Observable，可用于串联请求数据\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"merge: 将多个Observable合并为一个\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"mergeAll: 收集并订阅所有Observable,map + mergeAll === mergeMap\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"skipWhile: 符合条件时跳过本次，但是一旦出现不满足条件的项，则会发出此之后的所有项\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"takeWhile：第一个返回false时完成\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"takeUntil: 传入一个Observable，发出信号时时完成当前Observable\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"startWith: 可以和interval一起使用，定义第一次触发的delay参数\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"take：指定第几次执行\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"filter: 过滤掉不符合条件的数据项，和skipWhile类似但是会一直生效\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"关于取消订阅\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"结束observable的方式\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Observable发送完数据之后执行Observable.onComplete()\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Observable发生错误，执行Observable.OnError()\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"订阅者主动取消，subscription.unsubscribe()\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"angular中常见的Observable哪些需要取消订阅\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"调用httpClient方法返回的Observable不需要取消订阅，因为发送数据之后，angular会调用Observable.onComplete()\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"使用AsyncPipe不需要取消订阅\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"通过 Subject，BehaviorSubject，AsyncSubject，ReplaySubject 在各个 Component 之间通信，需要调用 unsubscribe()取消订阅\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"使用rxjs自带的操作符不需要取消订阅\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"应用实例\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"处理多个http请求\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"遇到需要调用多个接口返回数据并统一处理的时候，可以使用forkJoin，类似Promise.all()\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"  GetDetails(projectId: string) {\\n    const projects = this._http.get<any>(`/api/factory/projects/${projectId}`);\\n    const powers = this._http.get<any>(`/api/factory/projectpermissions/projects/${projectId}/userpermissions`);\\n    return forkJoin([projects, powers]).pipe(\\n      map(values => {\\n        const project = values[0];\\n        const power = values[1];\\n        return { ...project, power };\\n      })\\n    );\\n  }\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"事件节流\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"subscribe嵌套问题\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"BehaviorSubject、ReplaySubject和AsyncSubject区别\"\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"BehaviorSubject\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"可以设置初始值，并且订阅的时候会马上发送存储的最后一个值给订阅者\"\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"ReplaySubject\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"可以实现重播，new ReplaySubject(存储几次广播，过期时间)\"\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"AsyncSubject\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"一样可以存储数据，但是只会在Observable结束时发送数据\"\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"rxjs学习记录","date":"2021-03-13 18:53:00","description":"介绍rxjs的常用操作符和使用场景。"}},"frontMatter":{"title":"rxjs学习记录","date":"2021-03-13 18:53:00","description":"介绍rxjs的常用操作符和使用场景。"}},"__N_SSG":true}