{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    code: \"code\",\n    h3: \"h3\",\n    h4: \"h4\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"TODO\\n前后架构图对比\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"主要对象介绍\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"节点\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"连线： 表示节点之间的调用关系，和节点为1对多的关系\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"分组：一组节点和连线，可以展开和折叠\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"子图：一种特殊的节点类型，表示引用其他图，展开时会将子图加载出来\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"性能方面存在的问题\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"当节点和连线越多，拖拽响应速度越慢，超过几十个节点即有明显的卡顿\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"连线过程的预渲染也有明显的卡顿\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"优化目标\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"根据实际业务需求，节点表示微服务，连接表示引用关系，在大多数生产使用中节点不会特别多，连接会很多，因此测试数据定为：50个节点+340根线\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"组件拖拽不卡顿\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"连线过程不卡顿\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"线编辑不卡顿\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"原因分析\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"厚重的selector层，节点数据修改时会重构整个节点数据，根据分组和子图递归计算\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"由于每次节点和连线数据都是重新计算，节点拖拽过程中的每一帧，所有组件都会更新\"\n      }), \"\\n\", _jsx(_components.li, {}), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"优化点\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"检测标准\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"通过Performance 录制，对比相同数据量相同操作下的浏览器任务处理时间和掉帧率\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"使用\", _jsx(_components.code, {\n          children: \"React Dev Tool\"\n        }), \"直观看出组件是否存在不必要的更新\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"测试工具\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"React Tool\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Chrome Performance\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"Frame类型\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Frame： 按预期呈现\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Partially presented Frame （黄色）： Chrome 已尽最大努力及时至少呈现一些外观更新。例如，如果渲染器进程的主线程（画布动画）的工作延迟，但合成器线程（滚动）及时\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Dropped Frame（红色）：无法在合理的时间内即时呈现\"\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"图编辑页面性能优化","date":"2024-03-6 20:10:00","description":null,"public":false}},"frontMatter":{"title":"图编辑页面性能优化","date":"2024-03-6 20:10:00","description":null,"public":false},"headings":[{"depth":2,"text":"主要对象介绍"},{"depth":2,"text":"性能方面存在的问题"},{"depth":2,"text":"优化目标"},{"depth":2,"text":"原因分析"},{"depth":2,"text":"优化点"},{"depth":2,"text":"检测标准"},{"depth":2,"text":"测试工具"},{"depth":3,"text":"React Tool"},{"depth":3,"text":"Chrome Performance"},{"depth":4,"text":"Frame类型"}]},"__N_SSG":true}