{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    code: \"code\",\n    h2: \"h2\",\n    pre: \"pre\",\n    img: \"img\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"渐变文字和文本省略兼容性问题\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"CSS中通常使用\", _jsx(_components.code, {\n        children: \"background\"\n      }), \"的\", _jsx(_components.code, {\n        children: \"linear-gradient\"\n      }), \"函数和\", _jsx(_components.code, {\n        children: \"background-clip:text\"\n      }), \"来实现渐变色文字，但是当在同一个元素上同时设置\", _jsx(_components.code, {\n        children: \"text-overflow:ellipsis\"\n      }), \"时，在IOS Safari和Firefox下都无法显示出省略号。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"常规实现\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"使用渐变色文字和文本省略叠加，在chrome上效果符合预期，但是在IOS下所有浏览器（webkit内核）和Firefox下，都不能正常显示省略号。推测原因是浏览器处理\", _jsx(_components.code, {\n        children: \"background-clip：text\"\n      }), \"时，没将\", _jsx(_components.code, {\n        children: \"...\"\n      }), \"计入计算。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \".text1 {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  background: linear-gradient(137deg, #efe2b7 0%, #a4d1b1 90%);\\n  background-clip: text;\\n  color: transparent;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在chrome中效果如下：\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/linear-text-compact/chrome-1.png\",\n        alt: \"in chrome\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在Firefox和IOS Safari中，\", _jsx(_components.code, {\n        children: \"...\"\n      }), \"都没显示出来；\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/linear-text-compact/ff-1.png\",\n        alt: \"in FF\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"兼容IOS\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"使用双层盒子，第一层处理文本省略，第二层实现渐变文本。在第一层声明\", _jsx(_components.code, {\n        children: \"color\"\n      }), \"为渐变文本最后一段的颜色，\", _jsx(_components.code, {\n        children: \"...\"\n      }), \"即显示为该色，看起来也能达成渐变效果。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \".text2 {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  color: #a4d1b1;\\n}\\n.text2 > span {\\n  background: linear-gradient(137deg, #efe2b7 0%, #a4d1b1 90%);\\n  background-clip: text;\\n  color: transparent;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在IOS Safari效果如下：\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/linear-text-compact/ios-2.jpg\",\n        alt: \"in ios\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"但是在Firefox下仍热显示异常\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/linear-text-compact/ff-2.png\",\n        alt: \"in FF\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"处了FF兼容不了之外，这个方案中由于渐变色作用在全部文本上，当文本超出较多时，后半截被截取较多，展示出来的文本和\", _jsx(_components.code, {\n        children: \"...\"\n      }), \"在颜色变化上并不连续，效果并不佳。\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"使用mask-image\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"也能一定程度上实现渐变色，由于mask-image是使用遮罩加颜色的叠加效果来呈现，颜色的调节上没有使用\", _jsx(_components.code, {\n        children: \"background\"\n      }), \"灵活，并且需要注意兼容性问题。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \".text3 {\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  color: #a4d1b1;\\n  mask-image: linear-gradient(137deg, transparent -20%, #a4d1b1 90%);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"最终方案\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"使用两层文本显示，上层展示渐变色文本，下层展示正常颜色，中间有一层盖住非\", _jsx(_components.code, {\n        children: \"...\"\n      }), \"的文本内容（防止带透明度的颜色叠加），视觉上能看到的内容即为：渐变色文本+正常颜色展示的\", _jsx(_components.code, {\n        children: \"...\"\n      }), \"。\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-html\",\n        children: \"<div\\n  class=\\\"text4\\\"\\n  data-text=\\\"longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongtext\\\"\\n>\\n  longlonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglonglongtext\\n</div>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-css\",\n        children: \".text4 {\\n  position: relative;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  color: #a4d1b1;\\n}\\n.text4::before {\\n  position: absolute;\\n  top: 0;\\n  bottom: 0;\\n  left: 0;\\n  width: calc(100% - 20px);\\n  background-color: #fff;\\n  content: \\\"\\\";\\n}\\n.text4::after {\\n  content: attr(data-text);\\n  display: block;\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  z-index: 1;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  background: linear-gradient(137deg, #efe2b7 0%, #a4d1b1 90%);\\n  background-clip: text;\\n  color: transparent;\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在chrome、Firefox和IOS Safari中均展示一致的效果：\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/linear-text-compact/chrome-4.png\",\n        alt: \"in chrome\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/linear-text-compact/ff-4.png\",\n        alt: \"in FF\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/linear-text-compact/ios-4.jpg\",\n        alt: \"in IOS\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"测试文件\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"/linear-text-compact/test-linear-text.html\",\n        children: \"demo\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"渐变文字和文本省略兼容性问题","description":"解决CSS渐变文字和文本省略共同使用时，在IOS和Firefox下的兼容问题。","date":"2024-09-24 12:00:00","public":true}},"frontMatter":{"title":"渐变文字和文本省略兼容性问题","description":"解决CSS渐变文字和文本省略共同使用时，在IOS和Firefox下的兼容问题。","date":"2024-09-24 12:00:00","public":true},"headings":[{"depth":2,"text":"常规实现"},{"depth":2,"text":"兼容IOS"},{"depth":2,"text":"使用mask-image"},{"depth":2,"text":"最终方案"},{"depth":2,"text":"测试文件"}]},"__N_SSG":true}