{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"Rxjs中 skipWhile 和 filter 的区别\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"skipWhile 和 filter 都可以用来过滤不符合条件的数据项，也都是传入一个函数作为参数，但是两者有一定的区别。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以下是官方的描述：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"skipWhile：返回一个 Observable， 该 Observable 会跳过由源 Observable 发出的所有满足指定条件的数据项， 但是一旦出现了不满足条件的项，则发出在此之后的所有项。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"filter：通过只发送源 Observable 的中满足指定 predicate 函数的项来进行过滤。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"也就是说，skipWhile 一旦出现不满足条件的数据项，以后所有数据项都不会被跳过，filter则没有这种限制。\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Rxjs中 skipWhile 和 filter 的区别","date":"2021-09-01 12:00:00","description":"介绍Rxjs中 skipWhile 和 filter 的区别","category":"framework"}},"frontMatter":{"title":"Rxjs中 skipWhile 和 filter 的区别","date":"2021-09-01 12:00:00","description":"介绍Rxjs中 skipWhile 和 filter 的区别","category":"framework"},"headings":[]},"__N_SSG":true}