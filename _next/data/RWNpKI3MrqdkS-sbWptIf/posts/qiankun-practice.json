{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      h2: \"h2\",\n      h3: \"h3\",\n      p: \"p\",\n      blockquote: \"blockquote\",\n      ul: \"ul\",\n      li: \"li\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"微前端框架qiankun实践\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"为什么需要微前端框架?\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"融合不同前端技术栈的项目\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"现如今前端框架主要有Angular、React和Vue，每个框架都有很多周边工具，我碰到的主要有两种场景需要在一个应用中使用不同技术栈：\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"一是技术栈转型，由于种种原因要从一个技术栈转换到另一个技术栈，但是又没办法全部代码一次性重构，微前端是一种非常好的实施渐进式重构的手段和策略。\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"二是工具使用依赖于技术栈，假如你想引入一个表单生成引擎或图可视化工具，但这些工具依赖于另一个技术栈，在当前使用的技术栈生态中没有更好的产品替代，这种时候也可以考虑另起一个微项目来实现这一模块的功能。\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"解决单体项目的不可维护性\"\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(Frontend Monolith)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"qiankun可以将一个业务复杂的项目分为多个子应用，每个子应用独立开发独立部署，部署完成后主应用自动完成同步更新。\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"实践背景\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"以下我要使用qiankun融合Angular项目和React项目。Angular项目使用的是Angular9版本，是个比较旧的项目，业务比较多，代码中全局样式较多且比较混乱。React项目是基于Umi框架构建的。\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"主应用和子应用选取\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"将新旧两个项目作为子应用，再使用create-react-app搭建一个项目作为主应用。\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"主应用主要功能：\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"分配子应用路由，渲染子应用\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"配置本地代理，确保子应用中的接口能正常访问\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"存储共享数据\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"碰到的坑：\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"开发时自动刷新\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"静态资源访问\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"微前端框架qiankun实践","description":"使用qiankun合并react和angular项目，已上线！","public":false}},"frontMatter":{"title":"微前端框架qiankun实践","description":"使用qiankun合并react和angular项目，已上线！","public":false}},"__N_SSG":true}