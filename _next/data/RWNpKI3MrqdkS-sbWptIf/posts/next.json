{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      h3: \"h3\",\n      h4: \"h4\",\n      code: \"code\",\n      h5: \"h5\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      strong: \"strong\",\n      a: \"a\",\n      ol: \"ol\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"Next.js 基本使用\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"next.js 是基于React的前端框架，主要用于支持静态渲染或服务端渲染。\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"背景\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"SPA 💆\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"single-page application，即单页面应用，是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，避免了页面之间切换打断用户体验。所有必要的代码（\", _jsx(_components.code, {\n          children: \"HTML\"\n        }), \"、\", _jsx(_components.code, {\n          children: \"JavaScript\"\n        }), \"和\", _jsx(_components.code, {\n          children: \"CSS\"\n        }), \"）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面，页面在任何时间点都不会重新加载，也不会将控制转移到其他页面。\"]\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"优缺点\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"优点：\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"用户体验好，页面切换速度快\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"良好的前后端分离，分工明确\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"缺点：\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"不利于SEO\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"首屏渲染速度较慢\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"CSR 和 SSR\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"CSR：Client Side Render，即客户端渲染，服务端只返回一个html模板，页面的内容通过运行js运行。Angular、React和Vue构建的应用，默认都是客户端渲染。\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"SSR：Server Side Render，即服务端渲染。页面上的内容通过服务端渲染生成，然后再将完整的html返回给浏览器。\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"快速开始\"\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"创建项目\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"使用\", _jsx(_components.code, {\n          children: \"create-next-app\"\n        }), \"创建新的 Next.js 应用程序\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \"npx create-next-app --typescript\\n# or\\nyarn create next-app --typescript\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"基本特性\"\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"页面\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"在 Next.js 中，一个 \", _jsx(_components.strong, {\n          children: \"page（页面）\"\n        }), \" 就是一个从 \", _jsx(_components.code, {\n          children: \".js\"\n        }), \"、\", _jsx(_components.code, {\n          children: \"jsx\"\n        }), \"、\", _jsx(_components.code, {\n          children: \".ts\"\n        }), \" 或 \", _jsx(_components.code, {\n          children: \".tsx\"\n        }), \" 文件导出（export）的 \", _jsx(_components.a, {\n          href: \"https://reactjs.org/docs/components-and-props.html\",\n          children: \"React 组件\"\n        }), \" ，这些文件存放在 \", _jsx(_components.code, {\n          children: \"pages\"\n        }), \" 目录下。每个 page（页面）都使用其文件名作为路由（route）。\"]\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"路由\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"​\\t文件目录 → 路由\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"pages/index.js\"\n          }), \"  → \", _jsx(_components.code, {\n            children: \"/\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"pages/blog/index.js\"\n          }), \" → \", _jsx(_components.code, {\n            children: \"/blog\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"pages/blog.js\"\n          }), \"→ \", _jsx(_components.code, {\n            children: \"/blog\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"pages/blog/[id].js\"\n          }), \"→ \", _jsx(_components.code, {\n            children: \"/blog/:id\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"pages/[username]/settings.js\"\n          }), \" → \", _jsx(_components.code, {\n            children: \"/:username/settings\"\n          })]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"pages/post/[...all].js\"\n          }), \" → \", _jsx(_components.code, {\n            children: \"/post/*\"\n          }), \" (\", _jsx(_components.code, {\n            children: \"/post/2020/id/title\"\n          }), \")\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"通过useRouter获取动态参数，如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"const router = useRouter();\\nconst { all } = router.query;\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"路由跳转有两种方式，通过Link组件或者useRouter\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"import Link from 'next/link'\\n\\nconst Post: NextPage = () => {\\n    ...\\n    return (\\n        <div>\\n            <p>{Array.isArray(all) ? all.join('/') : all}</p>\\n            <Link href=\\\"/blog/123\\\"><a>blog</a></Link>\\n        </div>\\n    );\\n}\\n\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"获取数据\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"getStaticProps\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"使用getStaticProps方法，next.js会在执行\", _jsx(_components.code, {\n          children: \"next-build\"\n        }), \"的时候预渲染页面，并将getStaticProps的返回作为props传给组件。也就是说，在执行完build之后，数据就变成静态的数据了。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-tsx\",\n          children: \"export async function getStaticProps(context) {\\n    const res = await fetch(`https://service-go08i9b4-1301241041.gz.apigw.tencentcs.com/products`);\\n    const products = await res.json();\\n\\n    if (!products) {\\n        return {\\n            notFound: true,\\n        }\\n    }\\n\\n    return {\\n        props: { products: products as Products }, // will be passed to the page component as props\\n    }\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"getServerSideProps\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"使用getServerSideProps方法，next.js会在每一次请求的时候将返回结果作为props传给组件。使用getServerSideProps来获取数据，虽然剧有实时性，但是响应速度将比getStaticProps慢，因为每一次都需要请求新的数据然后计算结果，并且不能在没有额外的配置下被CDN缓存。\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"function Page({ data }) {\\n  // Render data...\\n}\\n\\n// This gets called on every request\\nexport async function getServerSideProps() {\\n  // Fetch data from external API\\n  const res = await fetch(`https://.../data`)\\n  const data = await res.json()\\n\\n  // Pass data to the page via props\\n  return { props: { data } }\\n}\\n\\nexport default Page\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"CSS支持\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"全局样式\"\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"在\", _jsx(_components.code, {\n              children: \"pages/_app.tsx\"\n            }), \"中导入css文件，同样支持从\", _jsx(_components.code, {\n              children: \"node_modules\"\n            }), \"目录导入。\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-tsx\",\n              children: \"import '../styles/globals.css'\\nimport 'bootstrap/dist/css/bootstrap.css'\\n\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"组件样式\"\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"Next.js 通过 \", _jsx(_components.code, {\n              children: \"[name].module.css\"\n            }), \" 文件命名约定来支持 \", _jsx(_components.a, {\n              href: \"https://github.com/css-modules/css-modules\",\n              children: \"CSS 模块\"\n            }), \" 。\"]\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"例如，假设 \", _jsx(_components.code, {\n              children: \"components/\"\n            }), \" 目录下有一个可重用 \", _jsx(_components.code, {\n              children: \"Button\"\n            }), \" 组件：\"]\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"首先，创建 \", _jsx(_components.code, {\n              children: \"components/Button.module.css\"\n            }), \" 文件并填入以下内容：\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-css\",\n              children: \".error {\\n  color: white;\\n  background-color: red;\\n}\\n\"\n            })\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"然后，创建 \", _jsx(_components.code, {\n              children: \"components/Button.js\"\n            }), \" 文件，导入（import）并使用上述 CSS 文件：\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-js\",\n              children: \"import styles from './Button.module.css'\\n\\nexport function Button() {\\n  return (\\n    <button\\n      type=\\\"button\\\"\\n      // Note how the \\\"error\\\" class is accessed as a property on the imported\\n      // `styles` object.\\n      className={styles.error}\\n    >\\n      Destroy\\n    </button>\\n  )\\n}\\n\"\n            })\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"另外，Next.js允许导入（import）具有 \", _jsx(_components.code, {\n              children: \".scss\"\n            }), \" 和 \", _jsx(_components.code, {\n              children: \".sass\"\n            }), \" 扩展名的 Sass 文件，只要确保安装了sass，即可使用。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"常用组件\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.code, {\n              children: \"next/image\"\n            })\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"Next.js 的 Image 组件（即 \", _jsx(_components.a, {\n              href: \"https://www.nextjs.cn/docs/api-reference/next/image\",\n              children: _jsx(_components.code, {\n                children: \"next/image\"\n              })\n            }), \"）是对 HTML 的 \", _jsx(_components.code, {\n              children: \"<img>\"\n            }), \" 元素的扩展，跟进了最新的 web 技术。\"]\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"自动图片优化功能（Automatic Image Optimization）能够调整图片尺寸、优化图片并以最新的 \", _jsx(_components.a, {\n              href: \"https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types\",\n              children: \"WebP\"\n            }), \" 格式传输图片（如果浏览器支持 WebP 格式的话）。这样就可以避免将较大的图片传送到视口（viewport）较小的设备上。此功能还允许 Next.js 自动采用未来的图片格式，并将其传输给支持这些格式的浏览器。\"]\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"自动图片优化功能可以支持任何图片来源。即使是托管在外部数据源上（例如，CMS），仍可对图片进行优化。\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"Next.js 无需在构建时优化图片，而是根据用户的请求按需优化图片。与静态站点生成器和纯静态解决方案不同，无论发布 10 张还是 1000 万张图片，构建时间都不会增加。\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"图片默认是延迟加载的。这意味着你的页面不会因为加载视口（viewport）外的图片而影响页面的加载速度。当图片进入视口（viewport）时才加载。\"\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"始终以这种方式渲染图片是为了避免 \", _jsx(_components.a, {\n              href: \"https://web.dev/cls/\",\n              children: \"累计布局偏移（Cumulative Layout Shift）\"\n            }), \"，此 \", _jsx(_components.a, {\n              href: \"https://web.dev/vitals/\",\n              children: \"Core Web Vital\"\n            }), \" 被 Google 作为参数用于 \", _jsx(_components.a, {\n              href: \"https://webmasters.googleblog.com/2020/05/evaluating-page-experience.html\",\n              children: \"搜索排名\"\n            }), \"。\"]\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"使用：\"\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-jsx\",\n              children: \"import Image from 'next/image'\\n\\nfunction Home() {\\n  return (\\n    <>\\n      <h1>My Homepage</h1>\\n      <Image\\n        src=\\\"/me.png\\\"\\n        alt=\\\"Picture of the author\\\"\\n        width={500}\\n        height={500}\\n      />\\n      <p>Welcome to my homepage!</p>\\n    </>\\n  )\\n}\\n\\nexport default Home\\n\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.code, {\n              children: \"next/head\"\n            })\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"用于将 HTML 标签添加到页面的 \", _jsx(_components.code, {\n              children: \"head\"\n            }), \" 中\"]\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              className: \"language-js\",\n              children: \"import Head from 'next/head'\\n\\nfunction IndexPage() {\\n  return (\\n    <div>\\n      <Head>\\n        <title>My page title</title>\\n        <meta name=\\\"viewport\\\" content=\\\"initial-scale=1.0, width=device-width\\\" />\\n      </Head>\\n      <p>Hello world!</p>\\n    </div>\\n  )\\n}\\n\\nexport default IndexPage\\n\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"配置\"\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"简介\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"对于 Next.js 的自定义高级行为，可以在项目目录的根目录（package.json 旁边）创建一个 next.config.js。\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"next.config.js\"\n        }), \"是一个Node.js模块，不是一个json文件。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"定义如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"module.exports = {\\n  /* config options here */\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"也可以使用一个函数：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"module.exports = (phase, { defaultConfig }) => {\\n  return {\\n    /* config options here */\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"通过config的类型大概可以知道它支持哪些配置：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"export declare type NextConfig = {\\n    [key: string]: any;\\n} & {\\n    i18n?: I18NConfig | null;\\n    eslint?: ESLintConfig;\\n    typescript?: TypeScriptConfig;\\n    headers?: () => Promise<Header[]>;\\n    rewrites?: () => Promise<Rewrite[] | {\\n        beforeFiles: Rewrite[];\\n        afterFiles: Rewrite[];\\n        fallback: Rewrite[];\\n    }>;\\n    redirects?: () => Promise<Redirect[]>;\\n    webpack5?: false;\\n    excludeDefaultMomentLocales?: boolean;\\n    webpack?: ((config: any, context: {\\n        dir: string;\\n        dev: boolean;\\n        isServer: boolean;\\n        buildId: string;\\n        config: NextConfigComplete;\\n        defaultLoaders: {\\n            babel: any;\\n        };\\n        totalPages: number;\\n        webpack: any;\\n    }) => any) | null;\\n    trailingSlash?: boolean;\\n    env?: {\\n        [key: string]: string;\\n    };\\n    distDir?: string;\\n    cleanDistDir?: boolean;\\n    assetPrefix?: string;\\n    useFileSystemPublicRoutes?: boolean;\\n    generateBuildId?: () => string | null | Promise<string | null>;\\n    generateEtags?: boolean;\\n    pageExtensions?: string[];\\n    compress?: boolean;\\n    poweredByHeader?: boolean;\\n    images?: ImageConfig;\\n    devIndicators?: {\\n        buildActivity?: boolean;\\n    };\\n    onDemandEntries?: {\\n        maxInactiveAge?: number;\\n        pagesBufferLength?: number;\\n    };\\n    amp?: {\\n        canonicalBase?: string;\\n    };\\n    basePath?: string;\\n    sassOptions?: {\\n        [key: string]: any;\\n    };\\n    productionBrowserSourceMaps?: boolean;\\n    optimizeFonts?: boolean;\\n    reactStrictMode?: boolean;\\n    publicRuntimeConfig?: {\\n        [key: string]: any;\\n    };\\n    serverRuntimeConfig?: {\\n        [key: string]: any;\\n    };\\n    httpAgentOptions?: {\\n        keepAlive?: boolean;\\n    };\\n    future?: {\\n        /**\\n         * @deprecated this options was moved to the top level\\n         */\\n        webpack5?: false;\\n        strictPostcssConfiguration?: boolean;\\n    };\\n    experimental?: {\\n        swcMinify?: boolean;\\n        swcLoader?: boolean;\\n        cpus?: number;\\n        sharedPool?: boolean;\\n        plugins?: boolean;\\n        profiling?: boolean;\\n        isrFlushToDisk?: boolean;\\n        reactMode?: 'legacy' | 'concurrent' | 'blocking';\\n        workerThreads?: boolean;\\n        pageEnv?: boolean;\\n        optimizeImages?: boolean;\\n        optimizeCss?: boolean;\\n        scrollRestoration?: boolean;\\n        stats?: boolean;\\n        externalDir?: boolean;\\n        conformance?: boolean;\\n        amp?: {\\n            optimizer?: any;\\n            validator?: string;\\n            skipValidation?: boolean;\\n        };\\n        reactRoot?: boolean;\\n        disableOptimizedLoading?: boolean;\\n        gzipSize?: boolean;\\n        craCompat?: boolean;\\n        esmExternals?: boolean | 'loose';\\n        staticPageGenerationTimeout?: number;\\n        isrMemoryCacheSize?: number;\\n        nftTracing?: boolean;\\n        concurrentFeatures?: boolean;\\n    };\\n};\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h4, {\n        children: \"部署\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"next的部署主要有三种方式\"\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"Vercel\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Vercel (之前也叫 Zeit 或 now.sh) 是一家提供静态网站托管的云平台，支持从 Github, GitLab, Bitbucket 等代码仓库中自动拉取代码 然后进行项目打包和部署等功能。但是国内访问速度较慢，在此不多做介绍。\"\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"Node.js服务\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Next.js 可以部署到任何支持 Node.js 的托管提供商处。\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"确保你的 \", _jsx(_components.code, {\n          children: \"package.json\"\n        }), \" 文件中设置了 \", _jsx(_components.code, {\n          children: \"\\\"build\\\"\"\n        }), \" 和 \", _jsx(_components.code, {\n          children: \"\\\"start\\\"\"\n        }), \" 脚本：\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-json\",\n          children: \"{\\n  \\\"scripts\\\": {\\n    \\\"dev\\\": \\\"next\\\",\\n    \\\"build\\\": \\\"next build\\\",\\n    \\\"start\\\": \\\"next start\\\"\\n  }\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"Docker Image\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"打成镜像，可以部署到docker容器里，也可以部署到容器编排器里（kubernetes或者HashiCorp Nomad）。\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Dockerfile文件参考：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-dockerfile\",\n          children: \"# Install dependencies only when needed\\nFROM node:alpine AS deps\\n# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.\\nRUN apk add --no-cache libc6-compat\\nWORKDIR /app\\nCOPY package.json yarn.lock ./\\nRUN yarn install --frozen-lockfile\\n\\n# Rebuild the source code only when needed\\nFROM node:alpine AS builder\\nWORKDIR /app\\nCOPY . .\\nCOPY --from=deps /app/node_modules ./node_modules\\nRUN yarn build && yarn install --production --ignore-scripts --prefer-offline\\n\\n# Production image, copy all the files and run next\\nFROM node:alpine AS runner\\nWORKDIR /app\\n\\nENV NODE_ENV production\\n\\nRUN addgroup -g 1001 -S nodejs\\nRUN adduser -S nextjs -u 1001\\n\\n# You only need to copy next.config.js if you are NOT using the default configuration\\n# COPY --from=builder /app/next.config.js ./\\nCOPY --from=builder /app/public ./public\\nCOPY --from=builder --chown=nextjs:nodejs /app/.next ./.next\\nCOPY --from=builder /app/node_modules ./node_modules\\nCOPY --from=builder /app/package.json ./package.json\\n\\nUSER nextjs\\n\\nEXPOSE 3000\\n\\n# Next.js collects completely anonymous telemetry data about general usage.\\n# Learn more here: https://nextjs.org/telemetry\\n# Uncomment the following line in case you want to disable telemetry.\\n# ENV NEXT_TELEMETRY_DISABLED 1\\n\\nCMD [\\\"yarn\\\", \\\"start\\\"]\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h5, {\n        children: \"导出静态文件\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"执行\", _jsx(_components.code, {\n          children: \"next build\"\n        }), \" 和 \", _jsx(_components.code, {\n          children: \"next export\"\n        })]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"符合以下任何一项，将不允许使用静态导出：\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"使用\", _jsx(_components.code, {\n            children: \"getStaticPaths\"\n          }), \"的\", _jsx(_components.code, {\n            children: \"fallback: true\"\n          }), \"模式\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"使用了\", _jsx(_components.code, {\n            children: \"next/Image\"\n          }), \"组件，并且使用默认\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"使用了\", _jsx(_components.code, {\n            children: \"getServerSideProps\"\n          }), \"来获取数据\"]\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"使用国际化路由\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"使用API路由\"\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Next.js 基本使用","date":"2021-09-09 20:23:00","description":"Next.js 从搭建到部署"}},"frontMatter":{"title":"Next.js 基本使用","date":"2021-09-09 20:23:00","description":"Next.js 从搭建到部署"}},"__N_SSG":true}