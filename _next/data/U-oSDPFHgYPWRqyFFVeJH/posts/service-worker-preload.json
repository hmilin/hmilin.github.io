{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    ul: \"ul\",\n    li: \"li\",\n    img: \"img\",\n    h3: \"h3\",\n    code: \"code\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"利用Service Worker预缓存提高性能\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Service Worker 特性\"\n    }), \"\\n\", _jsxs(_components.blockquote, {\n      children: [\"\\n\", _jsx(_components.p, {\n        children: \"Service worker 本质上充当 Web 应用程序、浏览器与网络（可用时）之间的代理服务器。这个 API 旨在创建有效的离线体验，它会拦截网络请求并根据网络是否可用来采取适当的动作、更新来自服务器的资源。它还提供入口以推送通知和访问后台同步 API。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"生命周期\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"下载：第一次访问页面后会下载service worker文件\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"安装\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"激活：关闭页面后，service worker会进入等待状态，重新打开页面后会激活\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"详细生命周期以及新老service worker替代时机：\\n\", _jsx(_components.img, {\n        src: \"/posts-img/sw-lifecycle.svg\",\n        alt: \"sw-lifecycle\"\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"使用限制\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Service Worker仅支持在开启HTTPS或localhost下使用\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"使用场景\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"后台数据同步\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"响应来自其他源的资源请求\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"集中接收计算成本高的数据更新，比如地理位置和陀螺仪信息，这样多个页面就可以利用同一组数据\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"在客户端进行 CoffeeScript、LESS、CJS/AMD 等模块编译和依赖管理（用于开发目的）\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"后台服务钩子\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"自定义模板用于特定 URL 模式\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"性能增强，比如预取用户可能需要的资源，比如相册中的后面数张图片\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"workbox precaching\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"workbox项目是基于Service Worker能力进行封装的一组插件，用于构建渐进式应用。\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"不同构建工具下的使用\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Webpack\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在Webpack项目中，可直接使用google团队提供的\", _jsx(_components.code, {\n        children: \"workbox-webpack-plugin\"\n      }), \"插件\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Vite\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"使用\", _jsx(_components.code, {\n        children: \"vite-plugin-pwa\"\n      }), \"，\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"什么文件需要预缓存\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"为了不造成浪费以及影响用户体验，预缓存原则上应该只缓存关键文件:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"全局样式表。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"提供全局功能的 JavaScript 文件。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"App Shell HTML\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"相关文章\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://developer.chrome.com/docs/workbox/precaching-dos-and-donts#maybe_dont_precache_static_html\",\n          children: \"precaching-dos-and-donts\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://developer.chrome.com/blog/app-shell\",\n          children: \"App Shell\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"利用Service Worker预缓存提高性能","description":"本文介绍如何使用Service Worker对关键资源进行预缓存，从而提升网站加载速度","public":false,"date":"2024-08-27 19:22:00","category":"performance"}},"frontMatter":{"title":"利用Service Worker预缓存提高性能","description":"本文介绍如何使用Service Worker对关键资源进行预缓存，从而提升网站加载速度","public":false,"date":"2024-08-27 19:22:00","category":"performance"},"headings":[{"depth":2,"text":"Service Worker 特性"},{"depth":2,"text":"生命周期"},{"depth":3,"text":"使用限制"},{"depth":3,"text":"使用场景"},{"depth":2,"text":"workbox precaching"},{"depth":2,"text":"不同构建工具下的使用"},{"depth":3,"text":"Webpack"},{"depth":3,"text":"Vite"},{"depth":2,"text":"什么文件需要预缓存"},{"depth":2,"text":"相关文章"}]},"__N_SSG":true}