{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    ul: \"ul\",\n    li: \"li\",\n    p: \"p\",\n    h3: \"h3\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"ES2021 功能\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"新增三个逻辑运算符\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"数字分隔符\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Promise.any & AggregateError\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"String.prototype.replaceAll\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"WeakRefs & FinalizationRegistry Objects\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"三个逻辑运算符\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"//\\\"Or Or Equals\\\"\\nx ||= y;\\nx || (x = y);\\n\\n// \\\"And And Equals\\\"\\nx &&= y;\\nx && (x = y);\\n\\n// \\\"QQ Equals\\\"\\nx ??= y;\\nx ?? (x = y);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"数字分隔符\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"支持数字组直接的视觉分离\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"1_000_000_000           // Ah, so a billion\\n101_475_938.38          // And this is hundreds of millions\\n\\nlet fee = 123_00;       // $123 (12300 cents, apparently)\\nlet fee = 12_300;       // $12,300 (woah, that fee!)\\nlet amount = 12345_00;  // 12,345 (1234500 cents, apparently)\\nlet amount = 123_4500;  // 123.45 (4-fixed financial)\\nlet amount = 1_234_500; // 1,234,500\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"0.000_001 // 1 millionth\\n1e10_000  // 10^10000 -- granted, far less useful / in-range...\\n0xA0_B0_C0;\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"Promise.any & AggregateError\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Promise.any([\\n  fetch('https://v8.dev/').then(() => 'home'),\\n  fetch('https://v8.dev/blog').then(() => 'blog'),\\n  fetch('https://v8.dev/docs').then(() => 'docs')\\n]).then((first) => {\\n  // 只要有一个状态为fulfilled就执行\\n  console.log(first);\\n  // → 'home'\\n}).catch((error) => {\\n  // 所有promises状态为rejected时执行\\n  console.log(error);\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"String.prototype.replaceAll\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// String.prototype.replaceAll(searchValue, replaceValue)\\n\\n'x'.replace('', '_');\\n// → '_x'\\n\\n'xxx'.replace(/(?:)/g, '_');\\n// → '_x_x_x_'\\n\\n'xxx'.replaceAll('', '_');\\n// → '_x_x_x_'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"WeakRefs & FinalizationRegistry Objects\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"WeakRef  的一个实例创建了一个对给定对象的引用，如果该对象仍然在内存中，则返回该对象；如果目标对象已经被垃圾回收，则返回未定义的对象。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FinalizationRegistry 的实例在注册的目标对象被垃圾收集后触发回调函数。\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"let target = {};\\nlet wr = new WeakRef(target);\\n// wr === target  false\\n\\n// Creating a new registry\\nconst registry = new FinalizationRegistry(heldValue => {\\n  // ....\\n});\\n\\nregistry.register(myObject, \\\"some value\\\", myObject);\\n// ...some time later, if you don't care about `myObject` anymore...\\nregistry.unregister(myObject);\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"ES2021更新内容","date":"2021-07-9 20:53:00","description":"ES2021更新内容概览。","category":"native"}},"frontMatter":{"title":"ES2021更新内容","date":"2021-07-9 20:53:00","description":"ES2021更新内容概览。","category":"native"},"headings":[{"depth":2,"text":"ES2021 功能"},{"depth":3,"text":"三个逻辑运算符"},{"depth":3,"text":"数字分隔符"},{"depth":3,"text":"Promise.any & AggregateError"},{"depth":3,"text":"String.prototype.replaceAll"},{"depth":3,"text":"WeakRefs & FinalizationRegistry Objects"}]},"__N_SSG":true}