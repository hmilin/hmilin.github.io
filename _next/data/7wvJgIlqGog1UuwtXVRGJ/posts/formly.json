{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\",\n      h3: \"h3\",\n      pre: \"pre\",\n      code: \"code\",\n      img: \"img\",\n      table: \"table\",\n      thead: \"thead\",\n      tr: \"tr\",\n      th: \"th\",\n      tbody: \"tbody\",\n      td: \"td\",\n      ol: \"ol\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"动态表单库 Formly\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"在一些偏中后台的项目中，表单功能是很常见的业务。随着各个框架和组件库对表单的功能扩展，写表单变得越来越简单，功能也越来越丰富。但是在一些复杂的业务场景中，处理复杂表单还是要耗费很多时间，并且很难分离业务逻辑和视图处理的代码。于是有很多动态表单生成库出现了，Angular 的 Formly，React 的 react-hook-form，同时支持 Vue 和 React 的 Formily，都是解决复杂表单的方案。\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Formly 就是 Angular 生态中被使用最多的动态表单库，具有很高的可维护性。并且 Formly 是基于 Angular 的响应式表单开发的，只要你掌握了响应式表单的内容，就可以很快上手 Formly。\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Formly 支持功能\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"自动生成表格\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"支持使用自定义字段类型、验证器、包装器和扩展\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"支持多种模式（正式模式和 JSON 模式）\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"支持多个常用组件库\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"基于 Angular 响应式表单\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Formly 支持的组件库\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"Bootstrap\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Material2\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Ionic\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"PrimeNG\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"Kendo\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"NativeScript\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"NG-ZORRO\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"快速开始\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"安装\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"安装 Formly 并指定使用 UI 库 Ng-Zorro\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"npx ng add @ngx-formly/schematics --ui-theme=ng-zorro-antd\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"执行上面命令会帮我们安装好 @ngx-formly/core、@ngx-formly/ng-zorro-antd 和 @ngx-formly/schematics，并在 AppModule 中导入，代码如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"imports: [\\n\\t...\\n\\tReactiveFormsModule,\\n\\tFormlyModule.forRoot({ extras: { lazyRender: true } }),\\n\\tFormlyNgZorroAntdModule\\n]\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.h3, {\n        children: [\"添加\", _jsx(_components.code, {\n          children: \"<formly-form>\"\n        })]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"formly-form\"\n        }), \"有三个参数\"]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"fields：表单字段配置\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"form：指定表单实例用于跟踪表单状态\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"model：表单的数据模型\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"template 代码如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"<form [formGroup]=\\\"form\\\">\\n  <formly-form [form]=\\\"form\\\" [fields]=\\\"fields\\\" [model]=\\\"model\\\"></formly-form>\\n  <button nzType=\\\"primary\\\" nz-button>保存</button>\\n</form>\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"添加配置数据\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \" \\tform = new FormGroup({});\\n\\tmodel = { email: 'email@gmail.com' };\\n\\tfields: FormlyFieldConfig[] = [\\n\\t\\t{\\n\\t\\t\\tkey: 'email',\\n\\t\\t\\ttype: 'input',\\n\\t\\t\\ttemplateOptions: {\\n\\t\\t\\t\\tlabel: 'Email address',\\n\\t\\t\\t\\tplaceholder: 'Enter email',\\n\\t\\t\\t\\trequired: true,\\n\\t\\t\\t}\\n\\t\\t}\\n\\t];\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"然后就可以看到表单生成效果啦\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/posts-img/formly-quick-start.png\",\n          alt: \"生成效果\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"配置\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"输入参数：\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"名称\"\n            }), _jsx(_components.th, {\n              children: \"类型\"\n            }), _jsx(_components.th, {\n              children: \"默认值\"\n            }), _jsx(_components.th, {\n              children: \"必填\"\n            }), _jsx(_components.th, {\n              children: \"描述\"\n            })]\n          })\n        }), _jsxs(_components.tbody, {\n          children: [_jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"form\"\n            }), _jsx(_components.td, {\n              children: \"FormGroup 或 FormArray\"\n            }), _jsxs(_components.td, {\n              children: [\"new FormGroup(\", \")\"]\n            }), _jsx(_components.td, {\n              children: \"否\"\n            }), _jsx(_components.td, {\n              children: \"允许跟踪模型值和验证状态的表单实例\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"fields\"\n            }), _jsx(_components.td, {\n              children: \"FormlyFieldConfig[]\"\n            }), _jsx(_components.td, {}), _jsx(_components.td, {\n              children: \"是\"\n            }), _jsx(_components.td, {\n              children: \"字段配置\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"model\"\n            }), _jsx(_components.td, {\n              children: \"any\"\n            }), _jsx(_components.td, {}), _jsx(_components.td, {\n              children: \"是\"\n            }), _jsx(_components.td, {\n              children: \"表单的数据模型\"\n            })]\n          }), _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"options\"\n            }), _jsx(_components.td, {\n              children: \"FormlyFormOptions\"\n            }), _jsx(_components.td, {}), _jsx(_components.td, {\n              children: \"否\"\n            }), _jsx(_components.td, {\n              children: \"表单选项\"\n            })]\n          })]\n        })]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"输出参数：\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.table, {\n        children: [_jsx(_components.thead, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.th, {\n              children: \"名称\"\n            }), _jsx(_components.th, {\n              children: \"描述\"\n            })]\n          })\n        }), _jsx(_components.tbody, {\n          children: _jsxs(_components.tr, {\n            children: [_jsx(_components.td, {\n              children: \"(modelChange)\"\n            }), _jsx(_components.td, {\n              children: \"字段数据发送变化\"\n            })]\n          })\n        })]\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"fields\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"fields 主要是传一些跟字段显示和处理逻辑相关的参数，具体可以参考他的类型定义\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"options\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"options 的接口定义如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"interface FormlyFormOptions {\\n    updateInitialValue?: () => void;\\n    resetModel?: (model?: any) => void;\\n    formState?: any;\\n    fieldChanges?: Subject<FormlyValueChangeEvent>;\\n    fieldTransform?: (fields: FormlyFieldConfig[], model: any, form: FormGroup | FormArray, options: FormlyFormOptions) => FormlyFieldConfig[];\\n    showError?: (field: FieldType) => boolean;\\n    parentForm?: FormGroupDirective | null;\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"fromState\"\n        }), \" 是一种用来在字段间通信的机制。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"fieldTransform\"\n        }), \" 用于在 Formly 处理或验证 fileds 之前转换成新的 fields 配置。\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"验证器\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"Formly 支持全局声明自定义验证器和错误信息，使用的时候只需传入之前定义的 key 值\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"export function IpValidator(control: FormControl): ValidationErrors {\\n  return /(\\\\d{1,3}\\\\.){3}\\\\d{1,3}/.test(control.value) ? null : { 'ip': true };\\n}\\n...\\n@NgModule({\\n  imports: [\\n    ...\\n    FormlyModule.forRoot({\\n      validators: [\\n        { name: 'ip', validation: IpValidator },\\n      ],\\n      validationMessages: [\\n        { name: 'ip', message: IpValidatorMessage },\\n        { name: 'required', message: 'This field is required' },\\n      ],\\n    }),\\n  ]\\n})\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"使用如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"{\\n  key: 'ip',\\n  type: 'input',\\n  templateOptions: {\\n    label: 'IP Address (using custom validation declared in ngModule)',\\n    required: true,\\n  },\\n  validators: {\\n    validation: ['ip'],\\n  },\\n},\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"也可以在定义 field 值的时候引入自定义验证器，使用如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"{\\n  key: 'ip',\\n  type: 'input',\\n  templateOptions: {\\n    label: 'IP Address (using custom validation through `validators.validation` property)',\\n    required: true,\\n  },\\n  validators: {\\n    validation: [IpValidator],\\n  },\\n\\tasyncValidators: {\\n    validation: [IpAsyncValidator],\\n\\t}\\n},\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"field 中的 validators 的值也可以是表达式的形势\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"NAME_OF_VALIDATOR: {\\n  expression: FUNCTION\\n  message: FUNCTION | STRING\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"示例如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \" validators: {\\n    ip: {\\n      expression: (c) => /(\\\\d{1,3}\\\\.){3}\\\\d{1,3}/.test(c.value),\\n      message: (error, field: FormlyFieldConfig) => `\\\"${field.formControl.value}\\\" is not a valid IP Address`,\\n    },\\n  },\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"当然也可以是异步的，返回一个 promise 对象即可，示例如下：\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \" asyncValidators: {\\n    ip: {\\n      expression: (c) => return new Promise((resolve, reject) => {\\n        setTimeout(() => {\\n          resolve(/(\\\\d{1,3}\\\\.){3}\\\\d{1,3}/.test(c.value));\\n        }, 1000);\\n      }),\\n      message: (error, field: FormlyFieldConfig) => `\\\"${field.formControl.value}\\\" is not a valid IP Address`,\\n    },\\n  }\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Formly 表达式\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"Formly 定义了一种表达式格式，用于动态修改 field 值。主要通过\", _jsx(_components.code, {\n          children: \"hideExpression\"\n        }), \"和\", _jsx(_components.code, {\n          children: \"expressionProperties\"\n        }), \"两个字段来定义。\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"hideExpression\"\n          }), \"用于动态显示表单字段\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"{\\n  key: 'iLikeTwix',\\n  type: 'checkbox',\\n  templateOptions: {\\n    label: 'I like twix',\\n  },\\n  hideExpression: '!model.name',\\n\\t// 也可以传入一个函数\\n\\thideExpression: (model: any, formState: any, field: FormlyFieldConfig) => {\\n    // access to the main model can be through `this.model` or `formState` or `model\\n    if (formState.mainModel && formState.mainModel.city) {\\n      return formState.mainModel.city !== \\\"123\\\"\\n    }\\n    return true;\\n  },\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [_jsx(_components.code, {\n            children: \"expressionProperties\"\n          }), \"用于动态修改 field 中的属性\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"{\\n  key: 'text2',\\n  type: 'input',\\n  templateOptions: {\\n    label: 'Hey!',\\n    placeholder: 'This one is disabled if there is no text in the other input',\\n  },\\n  expressionProperties: {\\n    'templateOptions.disabled': '!model.text',\\n  },\\n\\t// 也可以传入一个函数\\n\\texpressionProperties: {\\n\\t\\t'templateOptions.disabled': (model: any, formState: any, field: FormlyFieldConfig) => {\\n\\t\\t\\t// access to the main model can be through `this.model` or `formState` or `model\\n\\t\\t\\treturn !formState.mainModel.text\\n\\t\\t},\\n  }\\n},\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"自定义模板\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"除了使用已支持的 UI 库，也可以自定义组件，步骤如下：\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"定义一个 component，继承自类\", _jsx(_components.code, {\n            children: \"FieldType\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"import { Component } from '@angular/core';\\nimport { FieldType } from '@ngx-formly/core';\\n\\n@Component({\\n selector: 'formly-field-input',\\n template: `\\n   <input type=\\\"input\\\" [formControl]=\\\"formControl\\\" [formlyAttributes]=\\\"field\\\">\\n `,\\n})\\nexport class FormlyFieldInput extends FieldType {}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"在 NgModule 装饰器中注册自定义类型\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"import { FormlyFieldInput } from './formly-field-input';\\n\\n@NgModule({\\n declarations: [FormlyFieldInput],\\n imports: [\\n   ....\\n   FormlyModule.forRoot({\\n     types: [\\n       { name: 'input', component: FormlyFieldInput },\\n     ],\\n   }),\\n ],\\n})\\nexport class AppModule {}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"3\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"在 fields 中使用\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"export class AppComponent {\\n fields: FormlyFieldConfig[] = [\\n   {\\n     key: 'firstname',\\n     type: 'input',\\n   },\\n ];\\n\\n ...\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"自定义 Wrapper\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"wrapper\"\n        }), \"是用于指定一个 component 来包装字段，使用不同的 template 会预设不同的 warpper，可以使用自定义 warpper 进行覆盖\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"定义一个继承自类 FieldWrapper 的组件\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"import { Component, ViewChild, ViewContainerRef } from '@angular/core';\\nimport { FieldWrapper } from '@ngx-formly/core';\\n\\n@Component({\\nselector: 'formly-wrapper-panel',\\ntemplate: `\\n <div class=\\\"card\\\">\\n   <h3 class=\\\"card-header\\\">Its time to party</h3>\\n   <h3 class=\\\"card-header\\\">{{ to.label }}</h3>\\n   <div class=\\\"card-body\\\">\\n     <ng-container #fieldComponent></ng-container>\\n   </div>\\n </div>\\n`,\\n})\\nexport class PanelWrapperComponent extends FieldWrapper {\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"在 NgModule 装饰器中注册\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"import { NgModule } from '@angular/core';\\nimport { CommonModule } from '@angular/common';\\nimport { ReactiveFormsModule } from '@angular/forms';\\nimport { FormlyModule } from '@ngx-formly/core';\\nimport { FormlyBootstrapModule } from '@ngx-formly/bootstrap';\\n\\nimport { PanelWrapperComponent } from './panel-wrapper.component';\\nimport { AppComponent } from './app.component';\\n\\n@NgModule({\\nimports: [\\n CommonModule,\\n ReactiveFormsModule,\\n FormlyBootstrapModule,\\n FormlyModule.forRoot({\\n   wrappers: [\\n     { name: 'panel', component: PanelWrapperComponent },\\n   ],\\n }),\\n],\\ndeclarations: [\\n AppComponent,\\n PanelWrapperComponent,\\n],\\n})\\nexport class AppModule { }\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"3\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"在定义 fields 时使用\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"fields: FormlyFieldConfig[] = [\\n{\\n key: 'address',\\n wrappers: ['panel'],\\n templateOptions: { label: 'Address' },\\n fieldGroup: [{\\n   key: 'town',\\n   type: 'input',\\n   templateOptions: {\\n     required: true,\\n     type: 'text',\\n     label: 'Town',\\n   },\\n }],\\n},\\n];\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"也可以为特定的组件指定 wrapper\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"... //Imports\\n  @NgModule({\\n    imports: [\\n      CommonModule,\\n      ReactiveFormsModule,\\n      FormlyBootstrapModule,\\n      FormlyModule.forRoot({\\n        types: [\\n          {\\n            name: 'operator',\\n            component: OperatorComponent,\\n            wrappers: ['form-field']\\n          },\\n        ],\\n      }),\\n    ],\\n    declarations: [\\n      AppComponent,\\n      OperatorComponent\\n    ],\\n  })\\n  export class AppModule { }\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"使用 Formly 实现一个的动态表单\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"业务需求：实现一个输入表单，需要的输入参数信息由接口提供，输入个数不定，需要的参数有三种类型，分别为 string、volume、domain，string 类型用输入框填入，volume 类型用选择器填，domain 类型需要填入子域名并选择根域名。\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"接口返回的数据格式\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"let inputs: BpInputs = [\\n      {\\n        bpId: '07d46205-1c59-11ec-b603-0242ac130003',\\n        description: '请输入cloudname',\\n        type: 'string',\\n        internal: false,\\n        protocol: null,\\n        port: 0,\\n        required: true,\\n        initValue: {},\\n        hidden: false,\\n        path: '.bp',\\n        keyData: 'bp_cloudname',\\n        valueData: null,\\n        labelData: 'image-497f>cloudname',\\n        default: null,\\n      },\\n      {\\n        bpId: '07d46205-1c59-11ec-b603-0242ac130003',\\n        description: '80端口服务的子域名',\\n        type: 'domain',\\n        internal: false,\\n        protocol: 'HTTP',\\n        port: 80,\\n        required: true,\\n        initValue: {},\\n        hidden: false,\\n        path: '.bp',\\n        keyData: 'bp_domain80',\\n        valueData: null,\\n        labelData: 'image-497f>80端口访问域名',\\n        default: null,\\n      },\\n      {\\n        bpId: '07d46205-1c59-11ec-b603-0242ac130003',\\n        description: '存储路径',\\n        type: 'volume',\\n        internal: false,\\n        protocol: null,\\n        port: 0,\\n        required: true,\\n        initValue: { path: '/var/lib/nginx' },\\n        hidden: false,\\n        path: '.bp',\\n        keyData: 'bp_volume_var_lib_nginx',\\n        valueData: null,\\n        labelData: 'image-497f>存储路径',\\n        default: null,\\n      },\\n    ];\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"获取接口数据并定义 fields 值\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"\\tform = new FormGroup({});\\n\\tmodel = {};\\n\\tfields: FormlyFieldConfig[] = [];\\n\\toptions: FormlyFormOptions;\\n\\tvolumeOptions = [{ label: 'aaa', value: 'aaa' }];\\n\\tdomainSuffix = [{ label: 'dev.xxx.cn', value: 'dev.xxx.cn' }];\\n\\n\\tconstructor(private formlyService: FormlyService) {}\\n\\n\\tngOnInit(): void {\\n\\t\\tthis.formlyService.getInputs().subscribe((res) => {\\n\\t\\t\\tthis.initFields(res);\\n\\t\\t});\\n\\t}\\n\\n\\tinitFields(inputs: BpInputs) {\\n\\t\\tthis.fields = inputs.map((input): FormlyFieldConfig => {\\n\\t\\t\\tconst { keyData: key, labelData, type, hidden, required } = input;\\n\\n\\t\\t\\tlet field = {\\n\\t\\t\\t\\tkey,\\n\\t\\t\\t\\tname: key,\\n\\t\\t\\t\\thide: hidden,\\n\\t\\t\\t\\ttemplateOptions: {\\n\\t\\t\\t\\t\\trequired,\\n\\t\\t\\t\\t\\tlabel: labelData,\\n\\t\\t\\t\\t},\\n\\t\\t\\t};\\n\\n\\t\\t\\tswitch (type) {\\n\\t\\t\\t\\tcase 'string': {\\n\\t\\t\\t\\t\\treturn { ...field, type: 'input' };\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcase 'volume': {\\n\\t\\t\\t\\t\\tlet { templateOptions, ...oth } = field;\\n\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\t...oth,\\n\\t\\t\\t\\t\\t\\ttype: 'select',\\n\\t\\t\\t\\t\\t\\ttemplateOptions: {\\n\\t\\t\\t\\t\\t\\t\\t...templateOptions,\\n\\t\\t\\t\\t\\t\\t\\toptions: this.volumeOptions,\\n\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tcase 'domain':\\n\\t\\t\\t\\t\\treturn {\\n\\t\\t\\t\\t\\t\\tfieldGroupClassName: 'domain-group',\\n\\t\\t\\t\\t\\t\\tfieldGroup: [\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tkey: `${key}-prefix`,\\n\\t\\t\\t\\t\\t\\t\\t\\tname: `${key}-prefix`,\\n\\t\\t\\t\\t\\t\\t\\t\\ttype: 'input',\\n\\t\\t\\t\\t\\t\\t\\t\\tclassName: 'flex-2',\\n\\t\\t\\t\\t\\t\\t\\t\\ttemplateOptions: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\trequired,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tlabel: labelData,\\n\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t{\\n\\t\\t\\t\\t\\t\\t\\t\\tkey: `${key}-suffix`,\\n\\t\\t\\t\\t\\t\\t\\t\\tname: `${key}-suffix`,\\n\\t\\t\\t\\t\\t\\t\\t\\ttype: 'select',\\n\\t\\t\\t\\t\\t\\t\\t\\tclassName: 'flex-1',\\n\\t\\t\\t\\t\\t\\t\\t\\ttemplateOptions: {\\n\\t\\t\\t\\t\\t\\t\\t\\t\\trequired,\\n\\t\\t\\t\\t\\t\\t\\t\\t\\toptions: this.domainSuffix,\\n\\t\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t\\t},\\n\\t\\t\\t\\t\\t\\t],\\n\\t\\t\\t\\t\\t};\\n\\t\\t\\t\\tdefault:\\n\\t\\t\\t\\t\\treturn field;\\n\\t\\t\\t}\\n\\t\\t});\\n\\t}\\n\\n\\tsubmit() {\\n\\t\\tconsole.log('model', this.model);\\n\\t}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"3\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"定义使用formly-form组件\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"<form [formGroup]=\\\"form\\\" (ngSubmit)=\\\"submit()\\\">\\n  <formly-form [form]=\\\"form\\\" [fields]=\\\"fields\\\" [model]=\\\"model\\\"></formly-form>\\n  <nz-form-item>\\n    <nz-form-control [nzOffset]=\\\"8\\\">\\n      <button nzType=\\\"primary\\\" nz-button>保存</button>\\n    </nz-form-control>\\n  </nz-form-item>\\n</form>\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"4\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"查看显示效果：\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.img, {\n          src: \"/posts-img/input-form.png\",\n          alt: \"\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"实现自定义模板\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"实现一个自定义表单控件\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"定义 Formly 模板\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.p, {\n            children: \"注册自定义模板\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"动态表单库 Formly","date":"2021-09-22 21:00:00","description":"介绍在Angular中如何使用Formly让动态表单实现更简洁。"}},"frontMatter":{"title":"动态表单库 Formly","date":"2021-09-22 21:00:00","description":"介绍在Angular中如何使用Formly让动态表单实现更简洁。"}},"__N_SSG":true}