{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      code: \"code\",\n      h2: \"h2\",\n      h3: \"h3\",\n      blockquote: \"blockquote\",\n      ol: \"ol\",\n      li: \"li\",\n      pre: \"pre\",\n      a: \"a\",\n      ul: \"ul\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"微前端框架 qiankun 实践\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"最近把一个年代较久的\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"应用重构成\", _jsx(_components.code, {\n          children: \"React\"\n        }), \"，分了五六个迭代一步步重写，终于全部完成替换。用这篇博客记录一下碰到的问题。\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"为什么需要微前端框架?\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"融合不同前端技术栈的项目\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"现如今前端框架主要有\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"、\", _jsx(_components.code, {\n          children: \"React\"\n        }), \"和 \", _jsx(_components.code, {\n          children: \"Vue\"\n        }), \"，每个框架都有很多周边工具，我碰到的主要有两种场景需要在一个应用中使用不同技术栈：\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"一是技术栈转型，由于种种原因要从一个技术栈转换到另一个技术栈，但是又没办法全部代码一次性重构，微前端是一种非常好的实施渐进式重构的手段和策略。\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"二是工具使用依赖于技术栈，假如你想引入一个表单生成引擎或图可视化工具，但这些工具依赖于另一个技术栈，在当前使用的技术栈生态中没有更好的产品替代，这种时候也可以考虑另起一个微项目来实现这一模块的功能。\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"解决单体项目的不可维护性\"\n      }), \"\\n\", _jsxs(_components.blockquote, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"微前端架构旨在解决单体应用在一个相对长的时间跨度下，由于参与的人员、团队的增多、变迁，从一个普通应用演变成一个巨石应用(Frontend Monolith)后，随之而来的应用不可维护的问题。这类问题在企业级 Web 应用中尤其常见。\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"qiankun 可以将一个业务复杂的项目分为多个子应用，每个子应用独立开发独立部署，部署完成后主应用自动完成同步更新。\"\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"实践背景\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"本次使用 qiankun 目的是将\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \" 的项目转成 React。Angular 项目使用的是\", _jsx(_components.code, {\n          children: \"Angular@9.x\"\n        }), \"，是个比较旧的项目，业务比较多，代码中全局样式较多且比较混乱。React 项目是基于 Umi 框架构建的。\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"微前端的工作原理\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"子应用导出生命周期供主应用调用。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"提供子应用主应用通信方式。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"JS 沙箱模式，隔绝应用。\"\n        }), \"\\n\", _jsx(_components.li, {\n          children: \"CSS 隔离方案。\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"主应用和子应用选取\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"由于\", _jsx(_components.code, {\n          children: \"React\"\n        }), \"项目是最终目标，因此直接将 React 项目作为主应用，\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"项目改造为子应用，再按模块来重构，逐步替换。\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"React 主应用配置\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"由于 React 项目是使用了\", _jsx(_components.code, {\n          children: \"Umi\"\n        }), \"，\", _jsx(_components.code, {\n          children: \"Umi\"\n        }), \"自身提供了\", _jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"的插件\", _jsx(_components.code, {\n          children: \"@umijs/plugin-qiankun\"\n        }), \"，开启\", _jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"只需要少量的配置。\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"配置步骤如下：\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"安装插件\", _jsx(_components.code, {\n              children: \"@umijs/plugin-qiankun\"\n            })]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"在\", _jsx(_components.code, {\n              children: \"config.ts\"\n            }), \"中配置子应用\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"qiankun: {\\n\\tmaster: {\\n\\t\\tapps: [\\n\\t\\t\\t{\\n\\t\\t\\t\\tname: 'angular9',\\n\\t\\t\\t\\tentry: 'http://localhost:8001', // 入口\\n\\t\\t\\t\\t// 可放一些静态的参数传给子应用\\n\\t\\t\\t\\tprops: {\\n\\t\\t\\t\\t\\ttestProp1: 'test1',\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t],\\n\\t\\tprefetch: 'all',\\n\\t\\tsandbox: {\\n\\t\\t\\tstrictStyleIsolation: false,\\n\\t\\t\\texperimentalStyleIsolation: true,\\n\\t\\t},\\n\\t},\\n},\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"3\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"给子应用分配路由\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"routes: [\\n\\t{\\n\\t\\tpath: '/',\\n\\t\\tcomponent: '@/layouts',\\n\\t\\troutes: [\\n\\t\\t\\t// other\\n\\t\\t\\t{\\n\\t\\t\\t\\tpath: 'v1',\\n\\t\\t\\t\\tmicroApp: 'angular9', // 上面的子应用的名字\\n\\t\\t\\t\\tmicroAppProps: {\\n\\t\\t\\t\\t\\tautoSetLoading: false, // 是否开启loading动画\\n\\t\\t\\t\\t\\tclassName: 'appClassName',\\n\\t\\t\\t\\t\\twrapperClassName: 'wrapperClass',\\n\\t\\t\\t\\t},\\n\\t\\t\\t},\\n\\t\\t\\t// other\\n\\t\\t],\\n\\t},\\n],\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"这里使用的是路由绑定的方式，\", _jsx(_components.code, {\n          children: \"@umijs/plugin-qiankun\"\n        }), \"还提供了组件\", _jsx(_components.code, {\n          children: \"<MicroApp />\"\n        }), \"来引入子应用，组件引入的方式适合不带路由的子应用。\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"4\",\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"引入\", _jsx(_components.code, {\n            children: \"Zone.js\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Angular\"\n        }), \"的脏数据检测依赖\", _jsx(_components.code, {\n          children: \"Zone.js\"\n        }), \"，当一个页面上存在多个\", _jsx(_components.code, {\n          children: \"Zone\"\n        }), \"实例时，\", _jsx(_components.code, {\n          children: \"Zone.js\"\n        }), \"会抛出错误。因此为确保页面上只运行一个\", _jsx(_components.code, {\n          children: \"Zone\"\n        }), \"实例，统一在主应用引入\", _jsx(_components.code, {\n          children: \"Zone.js\"\n        }), \"。\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Angular 子应用配置\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"注：\", _jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"官方文档中的\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"子应用配置是旧版本，最新版本的应参考 github 仓库\", _jsx(_components.a, {\n          href: \"https://github.com/umijs/qiankun/tree/master/examples/angular9%E3%80%82\",\n          children: \"https://github.com/umijs/qiankun/tree/master/examples/angular9。\"\n        })]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"安装需要的插件\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-shell\",\n          children: \"yarn add -D @angular-builders/custom-webpack\\nyarn add single-spa single-spa-angular\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [_jsx(_components.code, {\n              children: \"Angular\"\n            }), \"是使用\", _jsx(_components.code, {\n              children: \"Webpack\"\n            }), \"构建，常规的配置在\", _jsx(_components.code, {\n              children: \"angular.json\"\n            }), \"指定，使用\", _jsx(_components.code, {\n              children: \"@angular-builders/custom-webpack\"\n            }), \"可以扩展其他\", _jsx(_components.code, {\n              children: \"Webpack\"\n            }), \"配置。\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [_jsx(_components.code, {\n              children: \"single-spa-angular\"\n            }), \"是\", _jsx(_components.code, {\n              children: \"single-spa\"\n            }), \"官方提供的，使用它可以快速的配置生命周期的导出和\", _jsx(_components.code, {\n              children: \"Webpack\"\n            }), \"配置。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"在\", _jsx(_components.code, {\n            children: \"main.ts\"\n          }), \"中配置入口加载和生命周期导出\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"+ import { singleSpaAngular, getSingleSpaExtraProviders } from 'single-spa-angular';\\n+ import { singleSpaPropsSubject } from './single-spa/single-spa-props';\\n\\n// 只在非qiankun子应用环境下执行\\n+\\tif (!(window as any).__POWERED_BY_QIANKUN__) {\\n\\t\\tplatformBrowserDynamic()\\n\\t\\t\\t.bootstrapModule(AppModule)\\n\\t\\t\\t.catch(err => console.error(err));\\n+\\t}\\n\\n+ const { bootstrap, mount, unmount } = singleSpaAngular({\\n+   bootstrapFunction: singleSpaProps => {\\n+\\t \\t// 主应用向子应用传参\\n+     singleSpaPropsSubject.next(singleSpaProps);\\n+     return platformBrowserDynamic(getSingleSpaExtraProviders()).bootstrapModule(AppModule);\\n+   },\\n+   template: '<app-root />',\\n+   Router,\\n+   NgZone: NgZone,\\n+ });\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"3\",\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"配置路由 base，修改\", _jsx(_components.code, {\n            children: \"app-routing.module.ts\"\n          })]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"@NgModule({\\n  ...\\n  providers: [\\n    {\\n      provide: APP_BASE_HREF,\\n      useValue: (window as any).__POWERED_BY_QIANKUN__ ? '/v1' : '/',\\n    },\\n  ],\\n})\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"4\",\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"注释掉\", _jsx(_components.code, {\n            children: \"zone.js\"\n          }), \"的引入\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"注释掉\", _jsx(_components.code, {\n          children: \"polyfills.ts\"\n        }), \"中的\", _jsx(_components.code, {\n          children: \"zone.js\"\n        }), \"引入\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-js\",\n          children: \"// import 'zone.js/dist/zone'; // Included with Angular CLI.\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"在\", _jsx(_components.code, {\n          children: \"index.html\"\n        }), \"中引入，适配子应用单独运行\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"<head>\\n <script src=\\\"https://unpkg.com/zone.js\\\" ignore></script>\\n</head>\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"微前端常见问题\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"父子应用间通信\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Umi\"\n        }), \"对\", _jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"的\", _jsx(_components.code, {\n          children: \"initGlobalState\"\n        }), \"结合\", _jsx(_components.code, {\n          children: \"initial-state\"\n        }), \"插件做了封装，只需在入口简单配置，即可使用\", _jsx(_components.code, {\n          children: \"useModel\"\n        }), \"来跟子应用通信。在\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"子应用中即通过\", _jsx(_components.code, {\n          children: \"single-spa\"\n        }), \"插件导出更新的生命周期并获取主应用共享的状态。\"]\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"主应用配置\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"修改\", _jsx(_components.code, {\n          children: \"app.ts\"\n        })]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"// 给路由绑定的微应用传值\\nexport function useQiankunStateForSlave() {\\n  const [masterState, setMasterState] = useState<MasterState>({});\\n\\n  return {\\n    masterState,\\n    setMasterState,\\n  };\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"组件中拿值和传值\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"import { useModel } from 'umi';\\n\\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\\n  const { masterState, setMasterState } = useModel('@@qiankunStateForSlave');\\n\\n  const { data: user } = useRequest(fetchUser);\\n\\n  useEffect(() => {\\n    if (user) {\\n      setMasterState({ user });\\n    }\\n  }, [user]);\\n\\n\\t// ...\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"子应用配置\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"main.ts\"\n        }), \"中导出\", _jsx(_components.code, {\n          children: \"update\"\n        }), \"生命周期\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"const { bootstrap, mount, unmount, update } = singleSpaAngular({\\n  // ...,\\n  updateFunction: (singleSpaProps: SingleSpaProps) => {\\n    console.log(\\\"update singleSpaProps\\\", singleSpaProps);\\n    singleSpaPropsSubject.next(singleSpaProps);\\n    return Promise.resolve();\\n  },\\n\\t// ...\\n});\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"组件中获取\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"export class AppComponent implements OnInit, OnDestroy {\\n\\t// ...\\n\\tngOnInit(): void {\\n\\t\\t// 监听主应用共享数据更新\\n    singleSpaPropsSubject.pipe(takeUntil(this.destroy)).subscribe((props) => {\\n      const { user } = props.masterState ?? {};\\n      if (user) {\\n        this.authService.user.next(user);\\n      }\\n    });\\n\\t}\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"在\", _jsx(_components.code, {\n          children: \"single-spa-props.ts\"\n        }), \"中导出一个方法用于给父组件传值\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"// 向父组件传值\\nexport const setMasterState = (state: Partial<MasterState>) => {\\n  singleSpaPropsSubject.pipe(take(1)).subscribe((props) => {\\n    props.setMasterState({ ...props.masterState, ...state });\\n  });\\n};\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"样式隔离\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"提供了两种样式隔离方案，通过配置\", _jsx(_components.code, {\n          children: \"sandbox\"\n        }), \"来开启样式隔离。\", _jsx(_components.code, {\n          children: \"strictStyleIsolation\"\n        }), \"为\", _jsx(_components.code, {\n          children: \"true\"\n        }), \"表示开启\", _jsx(_components.code, {\n          children: \"ShadowDom\"\n        }), \"\\t的严格样式隔离，这种模式下\", _jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"会为每个微应用的容器包裹上一个\", _jsx(_components.code, {\n          children: \"shadow dom\"\n        }), \"节点。\", _jsx(_components.code, {\n          children: \"experimentalStyleIsolation\"\n        }), \"是\", _jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"提供的一个实验性的样式隔离特性，会给每个子应用的样式多套一层根选择器来达到子应用间样式隔离的效果。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"ShadowDom\"\n        }), \"方案需要根据不同框架去做改造和适配才能用起来，所以项目中使用了第二种方案。\"]\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"部署配置\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"在做微前端改造之前，本项目是以\", _jsx(_components.code, {\n          children: \"Nginx\"\n        }), \"作为服务器，因此只需要根据子应用路由的定义，在Nginx上加一个转发规则，转到子应用的文件目录即可。需要注意的是，子应用的入口配置需要和\", _jsx(_components.code, {\n          children: \"Nginx\"\n        }), \"上的路径配置保持一致。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"qiankun: {\\n    master: {\\n      apps: [\\n        {\\n          name: 'angular9',\\n          entry:\\n            process.env.NODE_ENV === 'development'\\n              ? 'http://localhost:8001'\\n              : '/v1/',\\n        },\\n      ],\\n      // ...\\n    },\\n  },\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"碰到的坑\"\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"antd popover 导致页面崩溃\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"经过排查是\", _jsx(_components.code, {\n          children: \"antd\"\n        }), \"的基础组件\", _jsx(_components.code, {\n          children: \"rc-trigger@5.2.10\"\n        }), \"的问题，在最近发布的新版本中已经修复了改问题，在修复之前是通过\", _jsx(_components.code, {\n          children: \"patches\"\n        }), \"来修改包的源代码。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"diff --git a/node_modules/rc-trigger/es/Popup/PopupInner.js b/node_modules/rc-trigger/es/Popup/PopupInner.js\\nindex aacf97b..8ebea1b 100644\\n--- a/node_modules/rc-trigger/es/Popup/PopupInner.js\\n+++ b/node_modules/rc-trigger/es/Popup/PopupInner.js\\n@@ -82,9 +82,12 @@ var PopupInner = /*#__PURE__*/React.forwardRef(function (props, ref) {\\n     if (status === 'align') {\\n       // Repeat until not more align needed\\n       if (alignedClassName !== nextAlignedClassName) {\\n-        Promise.resolve().then(function () {\\n+        // Promise.resolve().then(function () {\\n+        //   forceAlign();\\n+        // });\\n+        setTimeout(() => {\\n           forceAlign();\\n-        });\\n+        }, 0);\\n       } else {\\n         goNextStatus(function () {\\n           var _prepareResolveRef$cu;\\ndiff --git a/node_modules/rc-trigger/lib/Popup/PopupInner.js b/node_modules/rc-trigger/lib/Popup/PopupInner.js\\nindex b603854..7daa11b 100644\\n--- a/node_modules/rc-trigger/lib/Popup/PopupInner.js\\n+++ b/node_modules/rc-trigger/lib/Popup/PopupInner.js\\n@@ -102,9 +102,12 @@ var PopupInner = /*#__PURE__*/React.forwardRef(function (props, ref) {\\n     if (status === 'align') {\\n       // Repeat until not more align needed\\n       if (alignedClassName !== nextAlignedClassName) {\\n-        Promise.resolve().then(function () {\\n+        // Promise.resolve().then(function () {\\n+        //   forceAlign();\\n+        // });\\n+        setTimeout(() => {\\n           forceAlign();\\n-        });\\n+        }, 0);\\n       } else {\\n         goNextStatus(function () {\\n           var _prepareResolveRef$cu;\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"Angular 应用卸载后重新挂载\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"这是在\", _jsx(_components.code, {\n          children: \"Umi\"\n        }), \"下才会触发的问题，直接使用\", _jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"不会触发，大概看了一下源码，\", _jsx(_components.code, {\n          children: \"Umi\"\n        }), \"是通过\", _jsx(_components.code, {\n          children: \"qiankun\"\n        }), \"的\", _jsx(_components.code, {\n          children: \"loadMicroApp\"\n        }), \"来加载子应用的，在执行卸载操作之前，\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"应用已经监听到了路由变化，并且不知道由于什么原因在卸载之后又重新渲染了。这个问题一直找不到根本解决方案，暂时用一个临时解决办法解决了。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"在\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"应用的\", _jsx(_components.code, {\n          children: \"App\"\n        }), \"组件中监听\", _jsx(_components.code, {\n          children: \"Location\"\n        }), \"变化，当路由非本应用基础路径时，调用\", _jsx(_components.code, {\n          children: \"router\"\n        }), \"的\", _jsx(_components.code, {\n          children: \"dispose\"\n        }), \"方法手动销毁路由器。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \" constructor(\\n    private location: Location,\\n    private router: Router\\n  ) {}\\n\\n  ngOnInit(): void {\\n    this.location.subscribe((change) => {\\n      // Angular应用卸载后路由会响应并使应用重新挂载，跳出子应用前先把router销毁\\n      if (change.type === \\\"popstate\\\" && !change.url.includes(\\\"/v1\\\")) {\\n        this.router.dispose();\\n      }\\n    });\\n  }\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"子应用静态文件访问异常\"\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"确保子应用使用正确的路径引入图片，由于配置了 base-href 为非\", _jsx(_components.code, {\n            children: \"/\"\n          }), \"，不能使用绝对路径\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"在html使用\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"const logo = require(\\\"src/assets/dashboard-users.svg\\\").default;\\n\"\n        })\n      }), \"\\n\", _jsx(_components.p, {\n        children: \"在CSS中使用\"\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-css\",\n          children: \"\\tbackground-image: url('~/assets/img/pro.svg');\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"配置启动命令\", _jsx(_components.code, {\n            children: \"ng serve\"\n          }), \"的参数\", _jsx(_components.code, {\n            children: \"--deploy-url\"\n          }), \"为当前运行的地址如下，且将\", _jsx(_components.code, {\n            children: \"ng build\"\n          }), \"的\", _jsx(_components.code, {\n            children: \"--deploy-url\"\n          }), \"配置为服务器子目录名称。\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          children: \"ng serve ... --deploy-url //localhost:8002/\\n\"\n        })\n      }), \"\\n\", _jsx(_components.h3, {\n        children: \"路由回退异常\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"原因也是\", _jsx(_components.code, {\n          children: \" Angular 应用卸载后重新挂载\"\n        }), \"，解决卸载之后重新挂载的问题即可。\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Demo 地址\"\n      }), \"\\n\", _jsx(_components.p, {\n        children: _jsx(_components.a, {\n          href: \"https://github.com/hmilin/umi-qiankun-with-angular\",\n          children: \"https://github.com/hmilin/umi-qiankun-with-angular\"\n        })\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"参考文档\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"single-spa[\", _jsx(_components.a, {\n          href: \"https://single-spa.js.org/docs\",\n          children: \"https://single-spa.js.org/docs\"\n        }), \"]\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"qiankun[\", _jsx(_components.a, {\n          href: \"https://qiankun.umijs.org/\",\n          children: \"https://qiankun.umijs.org/\"\n        }), \"]\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"@umijs/plugin-qiankun[\", _jsx(_components.a, {\n          href: \"https://v3.umijs.org/zh-CN/plugins/plugin-qiankun\",\n          children: \"https://v3.umijs.org/zh-CN/plugins/plugin-qiankun\"\n        }), \"]\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"微前端框架qiankun实践","description":"基于qiankun实现Angular向React的渐进式重构","public":true,"date":"2022-09-09 12:00:03","cover":"/posts-img/qiankun-logo.png"}},"frontMatter":{"title":"微前端框架qiankun实践","description":"基于qiankun实现Angular向React的渐进式重构","public":true,"date":"2022-09-09 12:00:03","cover":"/posts-img/qiankun-logo.png"}},"__N_SSG":true}