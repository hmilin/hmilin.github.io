{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h4: \"h4\",\n      ul: \"ul\",\n      li: \"li\",\n      h5: \"h5\",\n      p: \"p\",\n      a: \"a\",\n      img: \"img\",\n      pre: \"pre\",\n      code: \"code\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h4, {\n        children: \"安装失败原因\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.h5, {\n            children: \"使用了国外镜像源，网络不通\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"删除yarn.lock或者pack-lock.json，然后设置全局镜像源为淘宝镜像源，再重新执行 yarn 或 npm install 即可\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.h5, {\n            children: \"node-sass版本和node版本不匹配\"\n          }), \"\\n\", _jsxs(_components.p, {\n            children: [\"到\", _jsx(_components.a, {\n              href: \"https://www.npmjs.com/package/node-sass\",\n              children: \"node-sass的npm首页\"\n            }), \"查看版本对应\"]\n          }), \"\\n\", _jsx(_components.p, {\n            children: _jsx(_components.img, {\n              src: \"/posts-img/node-sass-version.png\",\n              alt: \"node-sass版本\"\n            })\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.h5, {\n            children: \"binding.node下载失败\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"node-sass会下载二进制文件binding.node，默认源是github，需要修改变量sass_binary_site\"\n          }), \"\\n\", _jsx(_components.pre, {\n            children: _jsx(_components.code, {\n              children: \"    // npm\\n    npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\\n    // yarn\\n    yarn config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/\\n\"\n            })\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"或者直接修改.npmrc 或者 .yarnrc\"\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsx(_components.h5, {\n            children: \"提示网络环境没有python\"\n          }), \"\\n\", _jsx(_components.p, {\n            children: \"这一步通常是binding.node下载失败，开始执行本地构建导致的，目标应该放在解决binding.node安装问题\"\n          }), \"\\n\"]\n        }), \"\\n\"]\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"解决node-sass安装失败问题","date":"2021-04-20 20:09:00","description":"node-sass 安装失败的原因和解决办法，现代sass已经不需要了？"}},"frontMatter":{"title":"解决node-sass安装失败问题","date":"2021-04-20 20:09:00","description":"node-sass 安装失败的原因和解决办法，现代sass已经不需要了？"}},"__N_SSG":true}