{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, {})\n  })) : _createMdxContent();\n  function _createMdxContent() {\n    const _components = Object.assign({\n      h1: \"h1\",\n      p: \"p\",\n      code: \"code\",\n      h2: \"h2\",\n      ul: \"ul\",\n      li: \"li\",\n      pre: \"pre\",\n      ol: \"ol\"\n    }, _provideComponents(), props.components);\n    return _jsxs(_Fragment, {\n      children: [_jsx(_components.h1, {\n        children: \"Angular14 新特性\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"距离\", _jsx(_components.code, {\n          children: \"Angular13\"\n        }), \"发布已经过去五个月了，半年一个大版本又将到来，\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"最近发布了 14 的 RC 版本，除了修复社区提出的 bugs，主要还有以下几个特性最值得关注。\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"Angular14 新特性预览\"\n      }), \"\\n\", _jsxs(_components.ul, {\n        children: [\"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"增强模板编译的检查，在前面的版本\", _jsx(_components.code, {\n              children: \"Angular\"\n            }), \"对模板的变量类型做了完善，但是编译的时候诊断还不够严格，一些致命错误才会报错，这个版本 Angular 增强对模板编译的诊断，帮助开发者提前发现错误。\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"对响应式表单的类型进行严格控制，在表单初始化的时候推断出 value 的类型，获取表单值不再是\", _jsx(_components.code, {\n              children: \"any\"\n            }), \"。\"]\n          }), \"\\n\"]\n        }), \"\\n\", _jsxs(_components.li, {\n          children: [\"\\n\", _jsxs(_components.p, {\n            children: [\"第三个就是本文即将重点介绍的，允许\", _jsx(_components.code, {\n              children: \"Component\"\n            }), \"、\", _jsx(_components.code, {\n              children: \"Directive\"\n            }), \"、\", _jsx(_components.code, {\n              children: \"Pipe\"\n            }), \" 独立于模块之外。在这之前，组件、指令或管道都必须在\", _jsx(_components.code, {\n              children: \"NgModule\"\n            }), \"里声明，再通过模块共享给其他模块，这种使用方式比较繁琐，不够灵活。\"]\n          }), \"\\n\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsx(_components.h2, {\n        children: \"standalone components 的使用\"\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"standalone\"\n        }), \"功能对\", _jsx(_components.code, {\n          children: \"Component\"\n        }), \"、\", _jsx(_components.code, {\n          children: \"Directive\"\n        }), \"和\", _jsx(_components.code, {\n          children: \"Pipe\"\n        }), \"都适用，下面以\", _jsx(_components.code, {\n          children: \"Component\"\n        }), \"为例。\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"在介绍特性之前，我们可以先创建一个\", _jsx(_components.code, {\n          children: \"angular14\"\n        }), \"的项目感受一下，执行以下命令：\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-bash\",\n          children: \" npx -p @angular/cli@14.0.0-rc.2 ng new angular-14-rc\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"创建一个独立组件\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"创建一个独立组件\", _jsx(_components.code, {\n          children: \"PhotoGalleryComponent\"\n        }), \"，只需在\", _jsx(_components.code, {\n          children: \"Component\"\n        }), \"参数中加上\", _jsx(_components.code, {\n          children: \"standalone: true\"\n        }), \"，\", _jsx(_components.code, {\n          children: \"imports\"\n        }), \" 参数用来引入另一个独立组件。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"@Component({\\n  standalone: true,\\n  selector: \\\"photo-gallery\\\",\\n  imports: [ImageGridComponent],\\n  template: ` ... <image-grid [images]=\\\"imageList\\\"></image-grid> `,\\n})\\nexport class PhotoGalleryComponent {\\n  // component logic\\n}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"2\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"使用独立组件\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"使用独立组件有两种方式，一种是在已声明\", _jsx(_components.code, {\n          children: \"standalone: true\"\n        }), \"的独立组件中引入，另一种是在模块中引入，在非独立组件中使用。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"@Component({\\n  standalone: true,\\n  selector: \\\"photo-gallery\\\",\\n  // an existing module is imported directly into a standalone component\\n  imports: [MatButtonModule],\\n  template: `\\n    ...\\n    <button mat-button>Next Page</button>\\n  `,\\n})\\nexport class PhotoGalleryComponent {\\n  // logic\\n}\\n\"\n        })\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"@NgModule({\\n  declarations: [AlbumComponent],\\n  exports: [AlbumComponent],\\n  imports: [PhotoGalleryComponent],\\n})\\nexport class AlbumModule {}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"3\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"将独立组件作为应用入口\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"使用\", _jsx(_components.code, {\n          children: \"bootstrapApplication\"\n        }), \"方法在\", _jsx(_components.code, {\n          children: \"main.ts\"\n        }), \"中将独立组件指定为应用入口，\", _jsx(_components.code, {\n          children: \"bootstrapApplication\"\n        }), \"的第二个参数可以指定\", _jsx(_components.code, {\n          children: \"providers\"\n        }), \"。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"bootstrapApplication(PhotoAppComponent, {\\n  providers: [\\n    {\\n      provide: BACKEND_URL,\\n      useValue: \\\"https://photoapp.looknongmodules.com/api\\\",\\n    },\\n    importProvidersFrom(\\n      RouterModule.forRoot([\\n        /* app routes */\\n      ])\\n    ),\\n    // ...\\n  ],\\n});\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"4\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"独立组件懒加载\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [_jsx(_components.code, {\n          children: \"Route\"\n        }), \"中新增了一个\", _jsx(_components.code, {\n          children: \"loadComponent\"\n        }), \"字段，用于懒加载独立组件。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"import { Routes, RouterModule } from \\\"@angular/router\\\";\\nimport { NgModule } from \\\"@angular/core\\\";\\n\\nconst routes: Routes = [\\n  {\\n    path: \\\"gallery\\\",\\n    loadComponent: () =>\\n      import(\\\"./photo-gallery/photo-gallery.component\\\").then(\\n        (mod) => mod.PhotoGalleryComponent\\n      ),\\n  },\\n];\\n\\n@NgModule({\\n  imports: [RouterModule.forRoot(routes)],\\n  exports: [RouterModule],\\n})\\nexport class AppRoutingModule {}\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"值得一提的是，本个版本开始，可以在\", _jsx(_components.code, {\n          children: \"Route\"\n        }), \"中声明对某些子路由指定\", _jsx(_components.code, {\n          children: \"providers\"\n        }), \"。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"export const ROUTES: Route[] = [\\n  {\\n    path: 'admin',\\n    providers: [\\n      AdminService,\\n      {provide: ADMIN_API_KEY, useValue: '12345'},\\n    ],\\n    children: [\\n      path: 'users', component: AdminUsersComponent,\\n      path: 'teams', component: AdminTeamsComponent,\\n    ],\\n  },\\n  // ... other application routes that don't\\n  //     have access to ADMIN_API_KEY or AdminService.\\n];\\n\"\n        })\n      }), \"\\n\", _jsxs(_components.ol, {\n        start: \"5\",\n        children: [\"\\n\", _jsx(_components.li, {\n          children: \"在模块中导出\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.p, {\n        children: [\"独立组件、指令、管道可以在被导入的模块中导出，在一些\", _jsx(_components.code, {\n          children: \"Angular\"\n        }), \"插件中，可能需要发布一组有联系的独立指令。\"]\n      }), \"\\n\", _jsx(_components.pre, {\n        children: _jsx(_components.code, {\n          className: \"language-typescript\",\n          children: \"@NgModule({\\n  imports: [ImageCarouselComponent, ImageSlideComponent],\\n  exports: [ImageCarouselComponent, ImageSlideComponent],\\n})\\nexport class CarouselModule {}\\n\"\n        })\n      })]\n    });\n  }\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"Angular14最大更新--standalone components","date":"2022-05-30 21:30:01","description":"Angular14 即将发布，standalone components是其中一大新特性。","cover":"/angular14-preview/cover.svg"}},"frontMatter":{"title":"Angular14最大更新--standalone components","date":"2022-05-30 21:30:01","description":"Angular14 即将发布，standalone components是其中一大新特性。","cover":"/angular14-preview/cover.svg"}},"__N_SSG":true}