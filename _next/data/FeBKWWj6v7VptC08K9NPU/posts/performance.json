{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    h4: \"h4\",\n    p: \"p\",\n    h5: \"h5\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"基于 Lighthourse 的性能优化\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"性能分析\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"devtools performance 使用\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"devtools memory 使用\"\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"devtools lighthouse 使用\"\n    }), \"\\n\", _jsx(_components.h4, {\n      children: \"FCP LCP TBT TTI CLS FID\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"FCP LCP TBT TTI CLS FID 等是一些衡量用户体验的指标，lighthouse 会根据这些指标来打分。\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"FCP\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First Contentful Paint, 首次内容绘制，浏览器首次任何渲染文本、图片、视频、canvas 或者非空 svg，但不包括任何 iframe 里的内容，是用户第一次开始使用页面内容。\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"LCP\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Largest Contentful Paint, 最大内容绘制，反映用户在页面等待了多少时间才看到页面主要内容。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"LCP 应在页面首次开始加载后的 2.5 秒内发生。\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"TBT\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Total Blocking Time, 总阻塞时间，是 FCP 和 TTI 之间的总时间，这期间，主线程被阻塞的时间过长，无法作出输入响应。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"为了提供良好的用户体验，网站在普通移动硬件上进行测试时，应该努力将总阻塞时间控制在 300 毫秒以内。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"优化指南：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"减少第三方代码的影响\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"减少 JavaScript 执行时间\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"最小化主线程工作\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"保持较低的请求数和较小的传输大小\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"TTI\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Time to Interactive, 可交互时间，页面从开始加载到主要子资源完成渲染，并能够快速、可靠地响应用户输入所需的时间。\\nlighthouse 上没有 TTI，TTI = FCP+TBT\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"测量步骤：\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"先进行 First Contentful Paint 首次内容绘制 (FCP)。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"沿时间轴正向搜索时长至少为 5 秒的安静窗口，其中，安静窗口的定义为：没有长任务且不超过两个正在处理的网络 GET 请求。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"沿时间轴反向搜索安静窗口之前的最后一个长任务，如果没有找到长任务，则在 FCP 步骤停止执行。\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"TTI 是安静窗口之前最后一个长任务的结束时间（如果没有找到长任务，则与 FCP 值相同）。\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"CLS\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Cumulative Layout Shift, 累积布局偏移，是测量视觉稳定性的一个以用户为中心的重要指标，因为该项指标有助于量化用户经历意外布局偏移的频率，较低的 CLS 有助于确保一个页面是令人愉悦的。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"为了提供良好的用户体验，页面的 CLS 应保持在 0.1. 或更少。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"容易发生 CLS 的几种情况：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"异步加载资源，动态添加 DOM 到页面内容上方\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"未知尺寸图像或视频\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"实际渲染后比后备字体更大或更小的字体\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"动态调整自身大小的第三方广告或小组件\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"优化指南：\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"设置 img 属性 width，height，大部分浏览器会自动加长宽比 aspect-ratio，如果需要自适应大小再通过 css 设置 width:xxx height:auto\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"响应式图片 picture 标签，通过 source 标签的 media 属性属性来设置不同尺寸设备下的图片来源\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"防止无尺寸的广告和 iframe 嵌入\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"加载网络字体导致字体闪烁，可以使用\", _jsx(_components.code, {\n          children: \"<link rel=preload>\"\n        }), \"预加载字体，和设置\", _jsx(_components.code, {\n          children: \"font-display: optional\"\n        }), \"（在很短的时间内未加载即使用备用字体）\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"Speed Index\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"页面加载过程中可视化内容的加载速度\"\n    }), \"\\n\", _jsx(_components.h5, {\n      children: \"FID\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"First Input Delay, 首次输入延迟，测量交互性。为了提供良好的用户体验，页面的 FID 应为 100 毫秒或更短。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"在 JavaScript 中测量 FID\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-javaScript\",\n        children: \"new PerformanceObserver((entryList) => {\\n  for (const entry of entryList.getEntries()) {\\n    const delay = entry.processingStart - entry.startTime;\\n    console.log('FID candidate:', delay, entry);\\n  }\\n}).observe({type: 'first-input', buffered: true});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"如何改进 FID\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"减少第三方代码的影响\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"减少 JavaScript 执行时间\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"最小化主线程工作\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"保持较低的请求数和较小的传输大小\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      children: \"内存泄漏分析\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"可访问性\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"img alt\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"色彩对比度优化\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"最佳实践\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"使用 HTTPS\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"防止 XSS 攻击\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"减少控制台 log\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"SEO\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"参考文章\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://web.dev/cls/\",\n        children: \"CLS\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://web.dev/tti/\",\n        children: \"TTI\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://web.dev/fid/\",\n        children: \"FID\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://web.dev/lighthouse-total-blocking-time/\",\n        children: \"TBT\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://web.dev/vitals/\",\n        children: \"Web 指标\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/GoogleChrome/web-vitals\",\n        children: \"测量工具库 web-vitals\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://web.dev/optimize-cls/?utm_source=lighthouse&utm_medium=devtools#%E5%AF%BC%E8%87%B4%E6%97%A0%E6%A0%B7%E5%BC%8F%E6%96%87%E6%9C%AC%E9%97%AA%E7%83%81-fout%E4%B8%8D%E5%8F%AF%E8%A7%81%E6%96%87%E6%9C%AC%E9%97%AA%E7%83%81-foit-%E7%9A%84%E7%BD%91%E7%BB%9C%E5%AD%97%E4%BD%93-%F0%9F%93%9D\",\n        children: \"CLS 优化指南\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"基于Lighthourse的性能优化","date":"2022-09-19 20:21:33","description":"归纳目前掌握的性能分析技巧，记录未解决的问题。","public":false}},"frontMatter":{"title":"基于Lighthourse的性能优化","date":"2022-09-19 20:21:33","description":"归纳目前掌握的性能分析技巧，记录未解决的问题。","public":false}},"__N_SSG":true}