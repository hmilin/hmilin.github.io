{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    a: \"a\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      children: \"现象\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在升级\", _jsx(_components.code, {\n        children: \"webpack\"\n      }), \"版本号时，将\", _jsx(_components.code, {\n        children: \"babel-loader\"\n      }), \"从7.x升级到9.x，运行代码之后发现\", _jsx(_components.code, {\n        children: \"babel\"\n      }), \"编译时装饰器语法出现错误：\", _jsx(_components.code, {\n        children: \"Decorators cannot be used to decorate object literal properties.\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"原因\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"原因如提示所说，装饰器无法在对象属性上使用。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"通过查询文档发现，babel在7.x以及之前的版本，是支持在对象属性上使用装饰器的\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-JavaScript\",\n        children: \"const myObj = {\\n  @dec1 foo: 3,\\n  @dec2 bar() {},\\n};\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"由于在\", _jsx(_components.code, {\n        children: \"ECMA\"\n      }), \"规范中移除了对象属性装饰器的用法，到目前为止也没有再重新支持，所以babel目前也不支持该用法（Typescript编译器也不支持）\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://github.com/tc39/proposal-decorators/issues/119\",\n        children: \"相关讨论\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"解决方法\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"方法一：\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"使用非对象属性装饰器，毕竟不是规范的语法。\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"方法二：\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"在babel的配置中设置\", _jsx(_components.code, {\n        children: \"@babel/plugin-proposal-decorators\"\n      }), \"插件的version参数为\", _jsx(_components.code, {\n        children: \"legacy\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"options: {\\n  plugins: [\\n            [\\\"@babel/plugin-proposal-decorators\\\", { \\\"version\\\": \\\"legacy\\\" }]\\n          ]\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://babeljs.io/docs/babel-plugin-proposal-decorators#version\",\n        children: \"不同版本的差异\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"babel升级报错：Decorators cannot be used to decorate object literal properties","date":"2024-04-08 17:24:12","description":"为什么babel版本升级之后会报以下错误：Decorators cannot be used to decorate object literal properties","cover":"/posts-img/babel-decorator-cover.png","category":"tool"}},"frontMatter":{"title":"babel升级报错：Decorators cannot be used to decorate object literal properties","date":"2024-04-08 17:24:12","description":"为什么babel版本升级之后会报以下错误：Decorators cannot be used to decorate object literal properties","cover":"/posts-img/babel-decorator-cover.png","category":"tool"}},"__N_SSG":true}