{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.p, {\n      children: \"利用 a 标签 download 属性和 href 属性\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text))\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"具体实现代码为\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"onDownload() {\\n    const ele = this.renderer.createElement('a');\\n    this.renderer.setAttribute(ele, 'href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(this.logSearch1.log));\\n    this.renderer.setAttribute(ele, 'download', 'log.txt');\\n    document.body.appendChild(ele);\\n    ele.click();\\n    document.body.removeChild(ele);\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"以上实现方式当遇到文本量多的时候会失效，因为href属性受浏览器对url长度的限制，超过限制长度会失效，可以使用blob对象，使用如下\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"onDownload() {\\n    const ele = this.renderer.createElement('a');\\n    // 修改部分\\n    const blob = new Blob([this.logSearch1.log], {type: 'text/plain'});\\n    this.renderer.setAttribute(ele, 'href', URL.createObjectURL(blob));\\n    // 修改部分end\\n    this.renderer.setAttribute(ele, 'download', 'log.txt');\\n    document.body.appendChild(ele);\\n    ele.click();\\n    document.body.removeChild(ele);\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"生成文件下载功能","date":"2021-02-21 15:32:00","description":"前端实现点击生成文件并下载。","category":"native"}},"frontMatter":{"title":"生成文件下载功能","date":"2021-02-21 15:32:00","description":"前端实现点击生成文件并下载。","category":"native"}},"__N_SSG":true}