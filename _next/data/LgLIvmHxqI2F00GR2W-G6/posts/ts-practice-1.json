{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\",\n    pre: \"pre\",\n    code: \"code\",\n    p: \"p\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"TypeScript 常用方法归纳\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"枚举转联合类型\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"export enum ProjectRole {\\n  MANAGER = 'project_manager',\\n  DEVELOPER = 'project_developer',\\n  VIEWER = 'project_viewer',\\n}\\n\\ntype ProjectRoleUnion = `${ProjectRole}`\\n// 等价于  \\\"project_manager\\\" | \\\"project_developer\\\" | \\\"project_viewer\\\"\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"拓展Window属性\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"declare global {\\n  interface Window {\\n    __PRODUCT_NAME__: string;\\n  }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"设置部分属性设为可选\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"TypeScript\"\n      }), \"类型函数中有，\", _jsx(_components.code, {\n        children: \"Required<T>\"\n      }), \"和\", _jsx(_components.code, {\n        children: \"Partial<T>\"\n      }), \"，分别是将T中的所有属性设为required和optional，在日常类型复用中常常需要给特定几个属性设为必选或可选，可以全局声明一个\", _jsx(_components.code, {\n        children: \"RequiredKeys\"\n      }), \"和\", _jsx(_components.code, {\n        children: \"PartialKeys\"\n      }), \"方法\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"/** 设置部分key为required */\\ntype RequiredKeys<T, U extends keyof T = keyof T> = Required<Pick<T, U>> & Partial<Omit<T, U>>;\\n\\n/** 设置部分key为可选 */\\ntype PartialKeys<T, U extends keyof T = keyof T> = Partial<Pick<T, U>> & Omit<T, U>;\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"TypeScript 常用方法归纳","date":"2024-03-14 10:00:00","description":"TypeScript 在日常开发中常用实用的小方法","category":"native"}},"frontMatter":{"title":"TypeScript 常用方法归纳","date":"2024-03-14 10:00:00","description":"TypeScript 在日常开发中常用实用的小方法","category":"native"}},"__N_SSG":true}