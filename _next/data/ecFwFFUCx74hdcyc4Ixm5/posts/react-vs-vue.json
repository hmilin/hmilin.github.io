{"pageProps":{"source":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    h2: \"h2\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      children: \"从RFC 到 Vue Composition Api的踩坑记录\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Props解构后响应式丢失\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"Pinia initialState没有声明key，会失去追踪\"\n    }), \"\\n\", _jsx(_components.h2, {\n      children: \"setUp 下的响应式数据解包（使用TypeScript的重要性！）\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"title":"从RFC 到 Vue Composition Api的踩坑记录","date":"2023-04-13 10:51:00","description":"记录从React Function Component 到 Vue Composition Api 由于使用习惯容易踩的坑。","public":false}},"frontMatter":{"title":"从RFC 到 Vue Composition Api的踩坑记录","date":"2023-04-13 10:51:00","description":"记录从React Function Component 到 Vue Composition Api 由于使用习惯容易踩的坑。","public":false}},"__N_SSG":true}